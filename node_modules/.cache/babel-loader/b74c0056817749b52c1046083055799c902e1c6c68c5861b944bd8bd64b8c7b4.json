{"ast":null,"code":"var _jsxFileName = \"/Users/computeraccount/Documents/texasholdem/TexasHoldEm/src/StartGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Flex, Image, Text, VStack, Box, HStack } from \"@chakra-ui/react\";\nimport backgroundImage from \"./LOGO.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction StartGame() {\n  _s();\n  // ALL INSTANCES OF STATE\n  const initialPlayerChips = 100;\n  const [playerChips, setPlayerChips] = useState(initialPlayerChips);\n  const [activeSession, setActiveSession] = useState(false);\n  const [myDeck, setMyDeck] = useState(null);\n  const [myCards, setMyCards] = useState(null);\n  const [drawn, setDrawn] = useState(false);\n  const [flop, setFlop] = useState(null);\n  const [flopped, setFlopped] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [tableCards, setTableCards] = useState([]);\n  const [computerHand, setComputerHand] = useState(null);\n  const [finalRound, setFinalRound] = useState(false);\n  const [ante, setAnte] = useState(0);\n  const [isBestHandPlayer, setIsBestHandPlayer] = useState(null);\n  const [isBestHandComputer, setIsBestHandComputer] = useState(null);\n\n  // PLAYER HAND POSSIBILITIES\n  const [isStraight, setIsStraight] = useState(false);\n  const [isFourKind, setIsFourKind] = useState(false);\n  const [isThreeKind, setIsThreeKind] = useState(false);\n  const [isTwoKind, setIsTwoKind] = useState(false);\n  const [isFlush, setIsFlush] = useState(false);\n  const [isTwoPair, setIsTwoPair] = useState(false);\n  const [isStraightFlush, setIsStraightFlush] = useState(false);\n  const [isHighCard, setIsHighCard] = useState(false);\n  const [isWinner, setIsWinner] = useState(null);\n\n  // COMPUTER HAND POSSIBILITIES\n  const [isStraightComputer, setIsStraightComputer] = useState(false);\n  const [isFourKindComputer, setIsFourKindComputer] = useState(false);\n  const [isThreeKindComputer, setIsThreeKindComputer] = useState(false);\n  const [isTwoKindComputer, setIsTwoKindComputer] = useState(false);\n  const [isFlushComputer, setIsFlushComputer] = useState(false);\n  const [isTwoPairComputer, setIsTwoPairComputer] = useState(false);\n  const [isStraightFlushComputer, setIsStraightFlushComputer] = useState(false);\n  const [isHighCardComputer, setIsHighCardComputer] = useState(false);\n\n  // STRAIGHT CHECK\n  const straightCheck = batch => {\n    const faceToInteger = {\n      0: 10,\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14\n    };\n    console.log(\"FACETOIN\", faceToInteger);\n    const intAssesser = batch.map(card => {\n      const firstCharacter = card[0];\n      console.log(\"First Character:\", firstCharacter);\n      return faceToInteger[firstCharacter] || parseInt(firstCharacter);\n    });\n    intAssesser.sort((a, b) => a - b);\n    console.log(\"AFTER SORT:\", intAssesser);\n    let consecutiveCount = 1;\n    for (let i = 0; i < intAssesser.length - 1; i++) {\n      if (intAssesser[i + 1] - intAssesser[i] === 1) {\n        consecutiveCount++;\n        console.log(\"Consecutive Count:\", consecutiveCount);\n        if (consecutiveCount >= 5) {\n          setIsStraight(true);\n          return true;\n        }\n      } else {\n        consecutiveCount = 1;\n      }\n    }\n    return null;\n  };\n\n  // 4 OF-A-KIND CHECK\n\n  const fourKindCheck = batch => {\n    const rankCounts = {};\n    batch.forEach(card => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"4-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 4) {\n        setIsFourKind(true);\n        return rank;\n      }\n    }\n    return null;\n  };\n\n  // 3 OF-A-KIND CHECK\n\n  const threeKindCheck = batch => {\n    const rankCounts = {};\n    batch.forEach(card => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\", rankCounts);\n    });\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 3) {\n        setIsThreeKind(true);\n        return rank;\n      }\n    }\n    return null;\n  };\n\n  // 2 OF-A-KIND CHECK\n\n  const twoKindCheck = batch => {\n    const rankCounts = {};\n    let pairCount = 0;\n    batch.forEach(card => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"2-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 2) {\n        setIsTwoKind(true);\n        pairCount++;\n      }\n    }\n    if (pairCount >= 2) {\n      setIsTwoPair(true);\n    }\n    return null;\n  };\n  const playerWinsChips = () => {\n    setPlayerChips(ante + playerChips);\n  };\n  useEffect(() => {\n    if (isWinner === \"player\") {\n      playerWinsChips();\n    }\n  }, [isWinner]);\n  const turnRaise = () => {\n    if (playerChips >= 10) {\n      setAnte(ante + 10);\n      setPlayerChips(playerChips - 10);\n    } else {\n      console.log(\"Not enough chips\");\n    }\n  };\n\n  // PLAYER HAND USE EFFECT\n  useEffect(() => {\n    console.log(\"isStraight:\", isStraight);\n    console.log(\"isFlush:\", isFlush);\n    console.log(\"isFourKind:\", isFourKind);\n    console.log(\"isThreeKind:\", isThreeKind);\n    console.log(\"isTwoKind:\", isTwoKind);\n    console.log(\"isHighCard:\", isHighCard);\n    console.log(\"isTwoPair:\", isTwoPair);\n    if (isStraight && isFlush) {\n      console.log(\"STRONGEST HAND: Straight Flush\");\n      setIsBestHandPlayer(9);\n    } else if (isFourKind) {\n      console.log(\"STRONGEST HAND: Four of a Kind\");\n      setIsBestHandPlayer(8);\n    } else if (isTwoPair && isThreeKind) {\n      console.log(\"STRONGEST HAND: Full House\");\n      setIsBestHandPlayer(7);\n    } else if (isFlush) {\n      console.log(\"STRONGEST HAND: Flush\");\n      setIsBestHandPlayer(6);\n    } else if (isStraight) {\n      console.log(\"STRONGEST HAND: Straight\");\n      setIsBestHandPlayer(5);\n    } else if (isThreeKind) {\n      console.log(\"STRONGEST HAND: Three of a Kind\");\n      setIsBestHandPlayer(4);\n    } else if (isTwoPair) {\n      console.log(\"STRONGEST HAND: Two Pair\");\n      setIsBestHandPlayer(3);\n    } else if (isTwoKind) {\n      console.log(\"STRONGEST HAND: Pair\");\n      setIsBestHandPlayer(2);\n    } else if (isHighCard) {\n      console.log(\"STRONGEST HAND: High Card\");\n      setIsBestHandPlayer(1);\n    }\n  }, [isStraight, isFlush, isFourKind, isThreeKind, isTwoKind, isHighCard, isTwoPair]);\n\n  // COMPUTER HAND USE EFFECT\n\n  useEffect(() => {\n    console.log(\"isStraightComputer:\", isStraightComputer);\n    console.log(\"isFlushComputer:\", isFlushComputer);\n    console.log(\"isFourKindComputer:\", isFourKindComputer);\n    console.log(\"isThreeKindComputer:\", isThreeKindComputer);\n    console.log(\"isTwoKindComputer:\", isTwoKindComputer);\n    console.log(\"isHighCardComputer:\", isHighCardComputer);\n    console.log(\"isTwoPairComputer:\", isTwoPairComputer);\n    if (isStraightComputer && isFlushComputer) {\n      console.log(\"STRONGEST HAND: Straight FlushComputer\");\n      setIsBestHandComputer(9);\n    } else if (isFourKindComputer) {\n      console.log(\"STRONGEST HAND: Four of a KindComputer\");\n      setIsBestHandComputer(8);\n    } else if (isTwoPairComputer && isThreeKindComputer) {\n      console.log(\"STRONGEST HAND: Full HouseComputer\");\n      setIsBestHandComputer(7);\n    } else if (isFlushComputer) {\n      console.log(\"STRONGEST HAND: FlushComputer\");\n      setIsBestHandComputer(6);\n    } else if (isStraightComputer) {\n      console.log(\"STRONGEST HAND: StraightComputer\");\n      setIsBestHandComputer(5);\n    } else if (isThreeKindComputer) {\n      console.log(\"STRONGEST HAND: Three of a KindComputer\");\n      setIsBestHandComputer(4);\n    } else if (isTwoPairComputer) {\n      console.log(\"STRONGEST HAND: Two PairComputer\");\n      setIsBestHandComputer(3);\n    } else if (isTwoKindComputer) {\n      console.log(\"STRONGEST HAND: PairComputer\");\n      setIsBestHandComputer(2);\n    } else if (isHighCardComputer) {\n      console.log(\"STRONGEST HAND: High CardComputer\");\n      setIsBestHandComputer(1);\n    }\n  }, [isStraightComputer, isFlushComputer, isFourKindComputer, isThreeKindComputer, isTwoKindComputer, isHighCardComputer, isTwoPairComputer]);\n  const evaluatePairRank = hand => {\n    const faceToInteger = {\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14\n    };\n    const ranks = {};\n    hand.forEach(card => {\n      const rank = card[0];\n      ranks[rank] = (ranks[rank] || 0) + 1;\n    });\n    let pairRank = 0;\n    for (const rank in ranks) {\n      if (ranks[rank] === 2 && (faceToInteger[rank] || parseInt(rank)) > pairRank) {\n        pairRank = faceToInteger[rank] || parseInt(rank);\n      }\n    }\n    return pairRank;\n  };\n  const resetChips = () => {\n    setPlayerChips(playerChips + 100);\n  };\n  const compareHands = () => {\n    console.log(\"BEST HAND COMPUTER\", isBestHandComputer);\n    console.log(\"BEST HAND PLAYER\", isBestHandPlayer);\n    if (isBestHandComputer > isBestHandPlayer) {\n      console.log(\"COMPUTER WINS\");\n      setIsWinner(\"computer\");\n    } else if (isBestHandPlayer > isBestHandComputer) {\n      setPlayerChips(playerChips + ante);\n      console.log(\"PLAYER WINS\");\n      setIsWinner(\"player\");\n    } else if (isBestHandComputer === 2 && isBestHandPlayer === 2) {\n      const playerBatch = [...myCards.map(card => card.code), ...flop.map(card => card.code), ...tableCards.map(card => card.code)];\n      const computerBatch = [...computerHand.map(card => card.code), ...flop.map(card => card.code), ...tableCards.map(card => card.code)];\n      const playerPairRank = evaluatePairRank(playerBatch);\n      const computerPairRank = evaluatePairRank(computerBatch);\n      if (playerPairRank > computerPairRank) {\n        console.log(\"PLAYER WINS\");\n        setIsWinner(\"player\");\n      } else if (computerPairRank > playerPairRank) {\n        console.log(\"COMPUTER WINS\");\n        setIsWinner(\"computer\");\n      } else {\n        const playerNonPairCards = playerBatch.filter(card => card !== playerPairRank);\n        const computerNonPairCards = computerBatch.filter(card => card !== computerPairRank);\n        playerNonPairCards.sort((a, b) => b - a);\n        computerNonPairCards.sort((a, b) => b - a);\n        if (playerNonPairCards[0] > computerNonPairCards[0]) {\n          console.log(\"PLAYER WINS with higher non-pair card\");\n          setIsWinner(\"player\");\n        } else if (playerNonPairCards[0] < computerNonPairCards[0]) {\n          console.log(\"COMPUTER WINS with higher non-pair card\");\n          setIsWinner(\"computer\");\n        } else {\n          console.log(\"TIE\");\n          setIsWinner(\"tie\");\n        }\n      }\n    }\n  };\n\n  // FLUSH CHECK\n\n  const flushCheck = batch => {\n    const suitCounts = {};\n    batch.forEach(card => {\n      const suit = card[1];\n      suitCounts[suit] = (suitCounts[suit] || 0) + 1;\n      console.log(\"SUIT-COUNTS CHECK:\", suitCounts);\n    });\n    for (const suit in suitCounts) {\n      if (suitCounts[suit] >= 5) {\n        setIsFlush(true);\n        return suit;\n      }\n    }\n    return null;\n  };\n\n  // HIGH CARD CHECK\n\n  const highCardCheck = batch => {\n    let highestCard = null;\n    setIsHighCard(true);\n    batch.forEach(card => {\n      const faceToInteger = {\n        J: 11,\n        Q: 12,\n        K: 13,\n        A: 14\n      };\n      const rank = card[0];\n      const rankValue = faceToInteger[rank] || parseInt(rank);\n      if (!highestCard || rankValue > highestCard.value) {\n        highestCard = {\n          rank,\n          value: rankValue\n        };\n      }\n    });\n    const highCard = highestCard.rank;\n    console.log(\"THE BATCH IN QUESTION --->\", batch, highCard);\n    return highCard;\n  };\n\n  // STRAIGHT CHECK COMPUTER\n  const straightCheckComputer = batch => {\n    const faceToInteger = {\n      0: 10,\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14\n    };\n    console.log(\"FACETOIN\", faceToInteger);\n    const intAssesser = batch.map(card => {\n      const firstCharacter = card[0];\n      console.log(\"First Character:\", firstCharacter);\n      return faceToInteger[firstCharacter] || parseInt(firstCharacter);\n    });\n    intAssesser.sort((a, b) => a - b);\n    console.log(\"AFTER SORT:\", intAssesser);\n    let consecutiveCount = 1;\n    for (let i = 0; i < intAssesser.length - 1; i++) {\n      if (intAssesser[i + 1] - intAssesser[i] === 1) {\n        consecutiveCount++;\n        console.log(\"Consecutive Count:\", consecutiveCount);\n        if (consecutiveCount >= 5) {\n          setIsStraightComputer(true);\n          return true;\n        }\n      } else {\n        consecutiveCount = 1;\n      }\n    }\n    return null;\n  };\n\n  // 4 OF-A-KIND CHECK COMPUTER\n\n  const fourKindCheckComputer = batch => {\n    const rankCounts = {};\n    batch.forEach(card => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"4-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 4) {\n        setIsFourKindComputer(true);\n        return rank;\n      }\n    }\n    return null;\n  };\n\n  // 3 OF-A-KIND CHECK COMPUTER\n\n  const threeKindCheckComputer = batch => {\n    const rankCounts = {};\n    batch.forEach(card => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\", rankCounts);\n    });\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 3) {\n        setIsThreeKindComputer(true);\n        return rank;\n      }\n    }\n    return null;\n  };\n\n  // 2 OF-A-KIND CHECK COMPUTER\n\n  const twoKindCheckComputer = batch => {\n    const rankCounts = {};\n    let pairCount = 0;\n    batch.forEach(card => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"2-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 2) {\n        setIsTwoKindComputer(true);\n        pairCount++;\n      }\n    }\n    if (pairCount >= 2) {\n      setIsTwoPairComputer(true);\n    }\n    return null;\n  };\n\n  // FLUSH CHECK COMPUTER\n\n  const flushCheckComputer = batch => {\n    const suitCounts = {};\n    batch.forEach(card => {\n      const suit = card[1];\n      suitCounts[suit] = (suitCounts[suit] || 0) + 1;\n      console.log(\"SUIT-COUNTS CHECK:\", suitCounts);\n    });\n    for (const suit in suitCounts) {\n      if (suitCounts[suit] >= 5) {\n        setIsFlushComputer(true);\n        return suit;\n      }\n    }\n    return null;\n  };\n\n  // HIGH CARD CHECK COMPUTER\n\n  const highCardCheckComputer = batch => {\n    let highestCard = null;\n    setIsHighCardComputer(true);\n    batch.forEach(card => {\n      const faceToInteger = {\n        J: 11,\n        Q: 12,\n        K: 13,\n        A: 14\n      };\n      const rank = card[0];\n      const rankValue = faceToInteger[rank] || parseInt(rank);\n      if (!highestCard || rankValue > highestCard.value) {\n        highestCard = {\n          rank,\n          value: rankValue\n        };\n      }\n    });\n    const highCard = highestCard.rank;\n    console.log(\"HIGH CARD\", highCard);\n    return highCard;\n  };\n  const resetGame = () => {\n    setActiveSession(false);\n    setMyDeck(null);\n    setMyCards(null);\n    setDrawn(false);\n    setFlop(null);\n    setFlopped(false);\n    setStartGame(false);\n    setTableCards([]);\n    setComputerHand(null);\n    setFinalRound(false);\n    setAnte(0);\n    setIsFourKind(false);\n    setIsThreeKind(false);\n    setIsTwoKind(false);\n    setIsFlush(false);\n    setIsStraight(false);\n    setIsStraightFlush(false);\n    setIsTwoPair(false);\n    setIsFourKindComputer(false);\n    setIsThreeKindComputer(false);\n    setIsTwoKindComputer(false);\n    setIsFlushComputer(false);\n    setIsStraightFlushComputer(false);\n    setIsTwoPairComputer(false);\n    setIsBestHandComputer(null);\n    setIsBestHandPlayer(null);\n    setIsStraightComputer(false);\n    setIsWinner(null);\n  };\n  const retrieveDeck = async () => {\n    const response = await fetch(\"https://www.deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\");\n    const data = await response.json();\n    setMyDeck(data.deck_id);\n    setActiveSession(true);\n    setStartGame(true);\n  };\n  const drawCards = async () => {\n    const response = await fetch(`https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=2`);\n    const data = await response.json();\n    setMyCards(data.cards);\n    setDrawn(true);\n    await drawComputerCards();\n  };\n\n  // NOTES\n\n  const drawComputerCards = async () => {\n    const response = await fetch(`https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=2`);\n    const data = await response.json();\n    setComputerHand(data.cards);\n  };\n  const drawFlop = async () => {\n    setAnte(ante + 20);\n    const response = await fetch(`https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=3`);\n    const data = await response.json();\n    setFlop(data.cards);\n    setFlopped(true);\n    setPlayerChips(playerChips - 10);\n  };\n  const hitCard = async () => {\n    setAnte(ante + 20);\n    setPlayerChips(playerChips - 10);\n    const response = await fetch(`https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=1`);\n    const data = await response.json();\n    setTableCards([...tableCards, ...data.cards]);\n  };\n  const handleFinalRound = async () => {\n    setAnte(ante + 20);\n    setPlayerChips(playerChips - 10);\n    setFinalRound(true);\n    evaluateComputerHand();\n    evaluatePlayerHand();\n  };\n  useEffect(() => {\n    if (isBestHandComputer !== null && isBestHandPlayer !== null) {\n      compareHands();\n    }\n  }, [isBestHandComputer, isBestHandPlayer]);\n  const evaluatePlayerHand = () => {\n    const allPlayerCards = [...myCards, ...flop, ...tableCards];\n    console.log(\"PLAYER CARDS:\", allPlayerCards);\n    const playerBatch = allPlayerCards.map(card => card.code);\n    console.log(\"PlayerBatch:\", playerBatch);\n    evaluateHand(playerBatch);\n  };\n  const evaluateComputerHand = () => {\n    const allComputerCards = [...computerHand, ...flop, ...tableCards];\n    console.log(\"COMPUTER CARDS\", allComputerCards);\n    const computerBatch = allComputerCards.map(card => card.code);\n    console.log(\"COMPUTER BATCH POINTED:\", computerBatch);\n    evaluateHandComputer(computerBatch);\n  };\n  const evaluateHand = batch => {\n    straightCheck(batch);\n    flushCheck(batch);\n    fourKindCheck(batch);\n    threeKindCheck(batch);\n    twoKindCheck(batch);\n    highCardCheck(batch);\n  };\n  const evaluateHandComputer = batch => {\n    straightCheckComputer(batch);\n    flushCheckComputer(batch);\n    fourKindCheckComputer(batch);\n    threeKindCheckComputer(batch);\n    twoKindCheckComputer(batch);\n    highCardCheckComputer(batch);\n  };\n  const rankToHandConverter = handType => {\n    const handTypeMap = {\n      9: \"Straight Flush\",\n      8: \"Four of a Kind\",\n      7: \"Full House\",\n      6: \"Flush\",\n      5: \"Straight\",\n      4: \"Three of a Kind\",\n      3: \"Two Pair\",\n      2: \"Pair\",\n      1: \"High Card\"\n    };\n    return handTypeMap[handType];\n  };\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    direction: \"column\",\n    align: \"center\",\n    justify: \"center\",\n    minH: \"100vh\",\n    w: \"100%\",\n    background: \"darkgreen\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"auto\",\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        width: [\"200px\", \"300px\", \"300px\", \"500px\", \"500px\"],\n        src: backgroundImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      w: \"215px\",\n      h: \"100px\",\n      bg: \"gray.200\",\n      borderRadius: \"md\",\n      textAlign: \"center\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontWeight: \"bold\",\n          fontSize: \"m\",\n          children: [\"My Chips: \", playerChips]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"darkred\",\n          fontWeight: \"bold\",\n          fontSize: \"m\",\n          children: [\"Ante: \", ante]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [playerChips <= 0 && !activeSession && /*#__PURE__*/_jsxDEV(VStack, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: \"NO MORE CHIPS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: resetChips,\n          colorScheme: \"blue\",\n          children: \"Buy Back: 100 Chips\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 11\n      }, this), !activeSession && playerChips > 0 && /*#__PURE__*/_jsxDEV(VStack, {\n        spacing: \"4\",\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          pt: 10,\n          mb: \"50vh\",\n          onClick: retrieveDeck,\n          colorScheme: \"blue\",\n          children: \"START GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 11\n      }, this), activeSession && !myCards && /*#__PURE__*/_jsxDEV(VStack, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          mb: \"20vh\",\n          onClick: drawCards,\n          disabled: drawn,\n          colorScheme: \"green\",\n          children: \"DRAW CARDS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 11\n      }, this), activeSession && myCards && /*#__PURE__*/_jsxDEV(VStack, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"xl\",\n          children: \"COMPUTER'S CARDS:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          children: finalRound ? computerHand.map((card, index) => /*#__PURE__*/_jsxDEV(Image, {\n            src: card.image,\n            boxSize: \"100px\"\n          }, `${card.code}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 783,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Image, {\n              src: \"https://www.deckofcardsapi.com/static/img/back.png\",\n              boxSize: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 791,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Image, {\n              src: \"https://www.deckofcardsapi.com/static/img/back.png\",\n              boxSize: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          marginTop: \"40px\",\n          fontSize: \"xl\",\n          children: \"MY CARDS:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          children: myCards.map(card => /*#__PURE__*/_jsxDEV(Image, {\n            src: card.image,\n            boxSize: \"100px\"\n          }, card.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          children: [!flop && /*#__PURE__*/_jsxDEV(VStack, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \"CALL: 10 Chips\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 814,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: drawFlop,\n              colorScheme: \"teal\",\n              children: \"DRAW FLOP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 815,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            marginTop: \"40px\",\n            fontSize: \"xl\",\n            children: \"TABLE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            children: [flop && flop.map(card => /*#__PURE__*/_jsxDEV(Image, {\n              src: card.image,\n              boxSize: \"100px\"\n            }, card.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 826,\n              columnNumber: 21\n            }, this)), tableCards.map((card, index) => /*#__PURE__*/_jsxDEV(Image, {\n              src: card.image,\n              boxSize: \"100px\"\n            }, `${card.code}-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 19\n            }, this)), flopped && tableCards.length === 0 && /*#__PURE__*/_jsxDEV(VStack, {\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: \"CALL: 10 Chips\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 837,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                marginLeft: \"20px\",\n                onClick: hitCard,\n                colorScheme: \"yellow\",\n                children: \"CALL TURN\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                marginLeft: \"20px\",\n                onClick: turnRaise,\n                colorScheme: \"pink\",\n                children: \"RAISE (+10)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 845,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 836,\n              columnNumber: 19\n            }, this), flopped && tableCards.length === 1 && /*#__PURE__*/_jsxDEV(VStack, {\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: \"CALL: 10 Chips\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                marginLeft: \"20px\",\n                onClick: hitCard,\n                colorScheme: \"orange\",\n                children: \"CALL RIVER\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 857,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                marginLeft: \"20px\",\n                onClick: turnRaise,\n                colorScheme: \"pink\",\n                children: \"RAISE (+10)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 864,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 855,\n              columnNumber: 19\n            }, this), tableCards.length === 2 && !finalRound && /*#__PURE__*/_jsxDEV(VStack, {\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: \"CALL: 10 Chips\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 875,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                marginLeft: \"20px\",\n                onClick: handleFinalRound,\n                colorScheme: \"purple\",\n                children: \"PLAY FINAL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 877,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                marginLeft: \"20px\",\n                onClick: turnRaise,\n                colorScheme: \"pink\",\n                children: \"RAISE (+10)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 884,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 15\n          }, this), !finalRound && /*#__PURE__*/_jsxDEV(Button, {\n            mb: \"10vh\",\n            onClick: resetGame,\n            colorScheme: \"red\",\n            children: \"FOLD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 17\n          }, this), finalRound && /*#__PURE__*/_jsxDEV(Button, {\n            onClick: resetGame,\n            colorScheme: \"cyan\",\n            children: \"NEW GAME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 17\n          }, this), isWinner === \"player\" && /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              color: \"red\",\n              fontWeight: \"bold\",\n              fontSize: \"40\",\n              textAlign: \"center\",\n              style: {\n                WebkitTextStroke: \"1px white\",\n                WebkitTextFillColor: \"red\"\n              },\n              children: \"PLAYER WINS!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              color: \"red\",\n              fontWeight: \"bold\",\n              fontSize: \"40\",\n              textAlign: \"center\",\n              style: {\n                WebkitTextStroke: \"1px white\",\n                WebkitTextFillColor: \"red\"\n              },\n              children: rankToHandConverter(isBestHandPlayer)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 17\n          }, this), isWinner === \"computer\" && /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              color: \"red\",\n              fontWeight: \"bold\",\n              fontSize: \"40\",\n              textAlign: \"center\",\n              style: {\n                WebkitTextStroke: \"1px white\",\n                WebkitTextFillColor: \"red\"\n              },\n              children: \"COMPUTER WINS!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 934,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              color: \"red\",\n              fontWeight: \"bold\",\n              fontSize: \"40\",\n              textAlign: \"center\",\n              style: {\n                WebkitTextStroke: \"1px white\",\n                WebkitTextFillColor: \"red\"\n              },\n              children: rankToHandConverter(isBestHandComputer)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 933,\n            columnNumber: 17\n          }, this), isWinner === \"tie\" && /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              color: \"red\",\n              fontWeight: \"bold\",\n              fontSize: \"40\",\n              textAlign: \"center\",\n              style: {\n                WebkitTextStroke: \"1px white\",\n                WebkitTextFillColor: \"red\"\n              },\n              children: \"TIE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 962,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 961,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 722,\n    columnNumber: 5\n  }, this);\n}\n_s(StartGame, \"2YTJKghTmfFNwGpnStjHMvKsC34=\");\n_c = StartGame;\nexport default StartGame;\nvar _c;\n$RefreshReg$(_c, \"StartGame\");","map":{"version":3,"names":["React","useState","useEffect","Button","Flex","Image","Text","VStack","Box","HStack","backgroundImage","jsxDEV","_jsxDEV","Fragment","_Fragment","StartGame","_s","initialPlayerChips","playerChips","setPlayerChips","activeSession","setActiveSession","myDeck","setMyDeck","myCards","setMyCards","drawn","setDrawn","flop","setFlop","flopped","setFlopped","startGame","setStartGame","tableCards","setTableCards","computerHand","setComputerHand","finalRound","setFinalRound","ante","setAnte","isBestHandPlayer","setIsBestHandPlayer","isBestHandComputer","setIsBestHandComputer","isStraight","setIsStraight","isFourKind","setIsFourKind","isThreeKind","setIsThreeKind","isTwoKind","setIsTwoKind","isFlush","setIsFlush","isTwoPair","setIsTwoPair","isStraightFlush","setIsStraightFlush","isHighCard","setIsHighCard","isWinner","setIsWinner","isStraightComputer","setIsStraightComputer","isFourKindComputer","setIsFourKindComputer","isThreeKindComputer","setIsThreeKindComputer","isTwoKindComputer","setIsTwoKindComputer","isFlushComputer","setIsFlushComputer","isTwoPairComputer","setIsTwoPairComputer","isStraightFlushComputer","setIsStraightFlushComputer","isHighCardComputer","setIsHighCardComputer","straightCheck","batch","faceToInteger","J","Q","K","A","console","log","intAssesser","map","card","firstCharacter","parseInt","sort","a","b","consecutiveCount","i","length","fourKindCheck","rankCounts","forEach","rank","threeKindCheck","twoKindCheck","pairCount","playerWinsChips","turnRaise","evaluatePairRank","hand","ranks","pairRank","resetChips","compareHands","playerBatch","code","computerBatch","playerPairRank","computerPairRank","playerNonPairCards","filter","computerNonPairCards","flushCheck","suitCounts","suit","highCardCheck","highestCard","rankValue","value","highCard","straightCheckComputer","fourKindCheckComputer","threeKindCheckComputer","twoKindCheckComputer","flushCheckComputer","highCardCheckComputer","resetGame","retrieveDeck","response","fetch","data","json","deck_id","drawCards","cards","drawComputerCards","drawFlop","hitCard","handleFinalRound","evaluateComputerHand","evaluatePlayerHand","allPlayerCards","evaluateHand","allComputerCards","evaluateHandComputer","rankToHandConverter","handType","handTypeMap","direction","align","justify","minH","w","background","children","mb","width","src","fileName","_jsxFileName","lineNumber","columnNumber","h","bg","borderRadius","textAlign","display","justifyContent","alignItems","fontWeight","fontSize","color","onClick","colorScheme","spacing","pt","disabled","index","image","boxSize","marginTop","marginLeft","style","WebkitTextStroke","WebkitTextFillColor","_c","$RefreshReg$"],"sources":["/Users/computeraccount/Documents/texasholdem/TexasHoldEm/src/StartGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Flex,\n  Image,\n  Text,\n  VStack,\n  Box,\n  HStack,\n} from \"@chakra-ui/react\";\nimport backgroundImage from \"./LOGO.png\";\n\nfunction StartGame() {\n  // ALL INSTANCES OF STATE\n  const initialPlayerChips = 100;\n  const [playerChips, setPlayerChips] = useState(initialPlayerChips);\n  const [activeSession, setActiveSession] = useState(false);\n  const [myDeck, setMyDeck] = useState(null);\n  const [myCards, setMyCards] = useState(null);\n  const [drawn, setDrawn] = useState(false);\n  const [flop, setFlop] = useState(null);\n  const [flopped, setFlopped] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [tableCards, setTableCards] = useState([]);\n  const [computerHand, setComputerHand] = useState(null);\n  const [finalRound, setFinalRound] = useState(false);\n  const [ante, setAnte] = useState(0);\n  const [isBestHandPlayer, setIsBestHandPlayer] = useState(null);\n  const [isBestHandComputer, setIsBestHandComputer] = useState(null);\n\n  // PLAYER HAND POSSIBILITIES\n  const [isStraight, setIsStraight] = useState(false);\n  const [isFourKind, setIsFourKind] = useState(false);\n  const [isThreeKind, setIsThreeKind] = useState(false);\n  const [isTwoKind, setIsTwoKind] = useState(false);\n  const [isFlush, setIsFlush] = useState(false);\n  const [isTwoPair, setIsTwoPair] = useState(false);\n  const [isStraightFlush, setIsStraightFlush] = useState(false);\n  const [isHighCard, setIsHighCard] = useState(false);\n  const [isWinner, setIsWinner] = useState(null);\n\n  // COMPUTER HAND POSSIBILITIES\n  const [isStraightComputer, setIsStraightComputer] = useState(false);\n  const [isFourKindComputer, setIsFourKindComputer] = useState(false);\n  const [isThreeKindComputer, setIsThreeKindComputer] = useState(false);\n  const [isTwoKindComputer, setIsTwoKindComputer] = useState(false);\n  const [isFlushComputer, setIsFlushComputer] = useState(false);\n  const [isTwoPairComputer, setIsTwoPairComputer] = useState(false);\n  const [isStraightFlushComputer, setIsStraightFlushComputer] = useState(false);\n  const [isHighCardComputer, setIsHighCardComputer] = useState(false);\n\n  // STRAIGHT CHECK\n  const straightCheck = (batch) => {\n    const faceToInteger = {\n      0: 10,\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14,\n    };\n    console.log(\"FACETOIN\", faceToInteger);\n\n    const intAssesser = batch.map((card) => {\n      const firstCharacter = card[0];\n      console.log(\"First Character:\", firstCharacter);\n      return faceToInteger[firstCharacter] || parseInt(firstCharacter);\n    });\n\n    intAssesser.sort((a, b) => a - b);\n    console.log(\"AFTER SORT:\", intAssesser);\n\n    let consecutiveCount = 1;\n    for (let i = 0; i < intAssesser.length - 1; i++) {\n      if (intAssesser[i + 1] - intAssesser[i] === 1) {\n        consecutiveCount++;\n        console.log(\"Consecutive Count:\", consecutiveCount);\n\n        if (consecutiveCount >= 5) {\n          setIsStraight(true);\n          return true;\n        }\n      } else {\n        consecutiveCount = 1;\n      }\n    }\n\n    return null;\n  };\n\n  // 4 OF-A-KIND CHECK\n\n  const fourKindCheck = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"4-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 4) {\n        setIsFourKind(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 3 OF-A-KIND CHECK\n\n  const threeKindCheck = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 3) {\n        setIsThreeKind(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 2 OF-A-KIND CHECK\n\n  const twoKindCheck = (batch) => {\n    const rankCounts = {};\n    let pairCount = 0;\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"2-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 2) {\n        setIsTwoKind(true);\n        pairCount++;\n      }\n    }\n\n    if (pairCount >= 2) {\n      setIsTwoPair(true);\n    }\n\n    return null;\n  };\n\n  const playerWinsChips = () => {\n    setPlayerChips(ante + playerChips);\n  };\n\n  useEffect(() => {\n    if (isWinner === \"player\") {\n      playerWinsChips();\n    }\n  }, [isWinner]);\n\n  const turnRaise = () => {\n    if (playerChips >= 10) {\n      setAnte(ante + 10);\n      setPlayerChips(playerChips - 10);\n    } else {\n      console.log(\"Not enough chips\");\n    }\n  };\n\n  // PLAYER HAND USE EFFECT\n  useEffect(() => {\n    console.log(\"isStraight:\", isStraight);\n    console.log(\"isFlush:\", isFlush);\n    console.log(\"isFourKind:\", isFourKind);\n    console.log(\"isThreeKind:\", isThreeKind);\n    console.log(\"isTwoKind:\", isTwoKind);\n    console.log(\"isHighCard:\", isHighCard);\n    console.log(\"isTwoPair:\", isTwoPair);\n\n    if (isStraight && isFlush) {\n      console.log(\"STRONGEST HAND: Straight Flush\");\n      setIsBestHandPlayer(9);\n    } else if (isFourKind) {\n      console.log(\"STRONGEST HAND: Four of a Kind\");\n      setIsBestHandPlayer(8);\n    } else if (isTwoPair && isThreeKind) {\n      console.log(\"STRONGEST HAND: Full House\");\n      setIsBestHandPlayer(7);\n    } else if (isFlush) {\n      console.log(\"STRONGEST HAND: Flush\");\n      setIsBestHandPlayer(6);\n    } else if (isStraight) {\n      console.log(\"STRONGEST HAND: Straight\");\n      setIsBestHandPlayer(5);\n    } else if (isThreeKind) {\n      console.log(\"STRONGEST HAND: Three of a Kind\");\n      setIsBestHandPlayer(4);\n    } else if (isTwoPair) {\n      console.log(\"STRONGEST HAND: Two Pair\");\n      setIsBestHandPlayer(3);\n    } else if (isTwoKind) {\n      console.log(\"STRONGEST HAND: Pair\");\n      setIsBestHandPlayer(2);\n    } else if (isHighCard) {\n      console.log(\"STRONGEST HAND: High Card\");\n      setIsBestHandPlayer(1);\n    }\n  }, [\n    isStraight,\n    isFlush,\n    isFourKind,\n    isThreeKind,\n    isTwoKind,\n    isHighCard,\n    isTwoPair,\n  ]);\n\n  // COMPUTER HAND USE EFFECT\n\n  useEffect(() => {\n    console.log(\"isStraightComputer:\", isStraightComputer);\n    console.log(\"isFlushComputer:\", isFlushComputer);\n    console.log(\"isFourKindComputer:\", isFourKindComputer);\n    console.log(\"isThreeKindComputer:\", isThreeKindComputer);\n    console.log(\"isTwoKindComputer:\", isTwoKindComputer);\n    console.log(\"isHighCardComputer:\", isHighCardComputer);\n    console.log(\"isTwoPairComputer:\", isTwoPairComputer);\n\n    if (isStraightComputer && isFlushComputer) {\n      console.log(\"STRONGEST HAND: Straight FlushComputer\");\n      setIsBestHandComputer(9);\n    } else if (isFourKindComputer) {\n      console.log(\"STRONGEST HAND: Four of a KindComputer\");\n      setIsBestHandComputer(8);\n    } else if (isTwoPairComputer && isThreeKindComputer) {\n      console.log(\"STRONGEST HAND: Full HouseComputer\");\n      setIsBestHandComputer(7);\n    } else if (isFlushComputer) {\n      console.log(\"STRONGEST HAND: FlushComputer\");\n      setIsBestHandComputer(6);\n    } else if (isStraightComputer) {\n      console.log(\"STRONGEST HAND: StraightComputer\");\n      setIsBestHandComputer(5);\n    } else if (isThreeKindComputer) {\n      console.log(\"STRONGEST HAND: Three of a KindComputer\");\n      setIsBestHandComputer(4);\n    } else if (isTwoPairComputer) {\n      console.log(\"STRONGEST HAND: Two PairComputer\");\n      setIsBestHandComputer(3);\n    } else if (isTwoKindComputer) {\n      console.log(\"STRONGEST HAND: PairComputer\");\n      setIsBestHandComputer(2);\n    } else if (isHighCardComputer) {\n      console.log(\"STRONGEST HAND: High CardComputer\");\n      setIsBestHandComputer(1);\n    }\n  }, [\n    isStraightComputer,\n    isFlushComputer,\n    isFourKindComputer,\n    isThreeKindComputer,\n    isTwoKindComputer,\n    isHighCardComputer,\n    isTwoPairComputer,\n  ]);\n\n  const evaluatePairRank = (hand) => {\n    const faceToInteger = {\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14,\n    };\n\n    const ranks = {};\n    hand.forEach((card) => {\n      const rank = card[0];\n      ranks[rank] = (ranks[rank] || 0) + 1;\n    });\n\n    let pairRank = 0;\n    for (const rank in ranks) {\n      if (\n        ranks[rank] === 2 &&\n        (faceToInteger[rank] || parseInt(rank)) > pairRank\n      ) {\n        pairRank = faceToInteger[rank] || parseInt(rank);\n      }\n    }\n    return pairRank;\n  };\n\n  const resetChips = () => {\n    setPlayerChips(playerChips + 100);\n  };\n\n  const compareHands = () => {\n    console.log(\"BEST HAND COMPUTER\", isBestHandComputer);\n    console.log(\"BEST HAND PLAYER\", isBestHandPlayer);\n\n    if (isBestHandComputer > isBestHandPlayer) {\n      console.log(\"COMPUTER WINS\");\n      setIsWinner(\"computer\");\n    } else if (isBestHandPlayer > isBestHandComputer) {\n      setPlayerChips(playerChips + ante);\n      console.log(\"PLAYER WINS\");\n      setIsWinner(\"player\");\n    } else if (isBestHandComputer === 2 && isBestHandPlayer === 2) {\n      const playerBatch = [\n        ...myCards.map((card) => card.code),\n        ...flop.map((card) => card.code),\n        ...tableCards.map((card) => card.code),\n      ];\n      const computerBatch = [\n        ...computerHand.map((card) => card.code),\n        ...flop.map((card) => card.code),\n        ...tableCards.map((card) => card.code),\n      ];\n\n      const playerPairRank = evaluatePairRank(playerBatch);\n      const computerPairRank = evaluatePairRank(computerBatch);\n\n      if (playerPairRank > computerPairRank) {\n        console.log(\"PLAYER WINS\");\n        setIsWinner(\"player\");\n      } else if (computerPairRank > playerPairRank) {\n        console.log(\"COMPUTER WINS\");\n        setIsWinner(\"computer\");\n      } else {\n        const playerNonPairCards = playerBatch.filter(\n          (card) => card !== playerPairRank\n        );\n        const computerNonPairCards = computerBatch.filter(\n          (card) => card !== computerPairRank\n        );\n\n        playerNonPairCards.sort((a, b) => b - a);\n        computerNonPairCards.sort((a, b) => b - a);\n\n        if (playerNonPairCards[0] > computerNonPairCards[0]) {\n          console.log(\"PLAYER WINS with higher non-pair card\");\n          setIsWinner(\"player\");\n        } else if (playerNonPairCards[0] < computerNonPairCards[0]) {\n          console.log(\"COMPUTER WINS with higher non-pair card\");\n          setIsWinner(\"computer\");\n        } else {\n          console.log(\"TIE\");\n          setIsWinner(\"tie\");\n        }\n      }\n    }\n  };\n\n  // FLUSH CHECK\n\n  const flushCheck = (batch) => {\n    const suitCounts = {};\n\n    batch.forEach((card) => {\n      const suit = card[1];\n      suitCounts[suit] = (suitCounts[suit] || 0) + 1;\n      console.log(\"SUIT-COUNTS CHECK:\", suitCounts);\n    });\n\n    for (const suit in suitCounts) {\n      if (suitCounts[suit] >= 5) {\n        setIsFlush(true);\n        return suit;\n      }\n    }\n\n    return null;\n  };\n\n  // HIGH CARD CHECK\n\n  const highCardCheck = (batch) => {\n    let highestCard = null;\n    setIsHighCard(true);\n\n    batch.forEach((card) => {\n      const faceToInteger = {\n        J: 11,\n        Q: 12,\n        K: 13,\n        A: 14,\n      };\n\n      const rank = card[0];\n      const rankValue = faceToInteger[rank] || parseInt(rank);\n\n      if (!highestCard || rankValue > highestCard.value) {\n        highestCard = { rank, value: rankValue };\n      }\n    });\n\n    const highCard = highestCard.rank;\n    console.log(\"THE BATCH IN QUESTION --->\", batch, highCard);\n    return highCard;\n  };\n\n  // STRAIGHT CHECK COMPUTER\n  const straightCheckComputer = (batch) => {\n    const faceToInteger = {\n      0: 10,\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14,\n    };\n    console.log(\"FACETOIN\", faceToInteger);\n\n    const intAssesser = batch.map((card) => {\n      const firstCharacter = card[0];\n      console.log(\"First Character:\", firstCharacter);\n      return faceToInteger[firstCharacter] || parseInt(firstCharacter);\n    });\n\n    intAssesser.sort((a, b) => a - b);\n    console.log(\"AFTER SORT:\", intAssesser);\n\n    let consecutiveCount = 1;\n    for (let i = 0; i < intAssesser.length - 1; i++) {\n      if (intAssesser[i + 1] - intAssesser[i] === 1) {\n        consecutiveCount++;\n        console.log(\"Consecutive Count:\", consecutiveCount);\n\n        if (consecutiveCount >= 5) {\n          setIsStraightComputer(true);\n          return true;\n        }\n      } else {\n        consecutiveCount = 1;\n      }\n    }\n\n    return null;\n  };\n\n  // 4 OF-A-KIND CHECK COMPUTER\n\n  const fourKindCheckComputer = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"4-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 4) {\n        setIsFourKindComputer(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 3 OF-A-KIND CHECK COMPUTER\n\n  const threeKindCheckComputer = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 3) {\n        setIsThreeKindComputer(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 2 OF-A-KIND CHECK COMPUTER\n\n  const twoKindCheckComputer = (batch) => {\n    const rankCounts = {};\n    let pairCount = 0;\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"2-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 2) {\n        setIsTwoKindComputer(true);\n        pairCount++;\n      }\n    }\n\n    if (pairCount >= 2) {\n      setIsTwoPairComputer(true);\n    }\n\n    return null;\n  };\n\n  // FLUSH CHECK COMPUTER\n\n  const flushCheckComputer = (batch) => {\n    const suitCounts = {};\n\n    batch.forEach((card) => {\n      const suit = card[1];\n      suitCounts[suit] = (suitCounts[suit] || 0) + 1;\n      console.log(\"SUIT-COUNTS CHECK:\", suitCounts);\n    });\n\n    for (const suit in suitCounts) {\n      if (suitCounts[suit] >= 5) {\n        setIsFlushComputer(true);\n        return suit;\n      }\n    }\n\n    return null;\n  };\n\n  // HIGH CARD CHECK COMPUTER\n\n  const highCardCheckComputer = (batch) => {\n    let highestCard = null;\n    setIsHighCardComputer(true);\n\n    batch.forEach((card) => {\n      const faceToInteger = {\n        J: 11,\n        Q: 12,\n        K: 13,\n        A: 14,\n      };\n\n      const rank = card[0];\n      const rankValue = faceToInteger[rank] || parseInt(rank);\n\n      if (!highestCard || rankValue > highestCard.value) {\n        highestCard = { rank, value: rankValue };\n      }\n    });\n\n    const highCard = highestCard.rank;\n    console.log(\"HIGH CARD\", highCard);\n    return highCard;\n  };\n\n  const resetGame = () => {\n    setActiveSession(false);\n    setMyDeck(null);\n    setMyCards(null);\n    setDrawn(false);\n    setFlop(null);\n    setFlopped(false);\n    setStartGame(false);\n    setTableCards([]);\n    setComputerHand(null);\n    setFinalRound(false);\n    setAnte(0);\n    setIsFourKind(false);\n    setIsThreeKind(false);\n    setIsTwoKind(false);\n    setIsFlush(false);\n    setIsStraight(false);\n    setIsStraightFlush(false);\n    setIsTwoPair(false);\n    setIsFourKindComputer(false);\n    setIsThreeKindComputer(false);\n    setIsTwoKindComputer(false);\n    setIsFlushComputer(false);\n    setIsStraightFlushComputer(false);\n    setIsTwoPairComputer(false);\n    setIsBestHandComputer(null);\n    setIsBestHandPlayer(null);\n    setIsStraightComputer(false);\n    setIsWinner(null);\n  };\n\n  const retrieveDeck = async () => {\n    const response = await fetch(\n      \"https://www.deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\"\n    );\n    const data = await response.json();\n\n    setMyDeck(data.deck_id);\n    setActiveSession(true);\n    setStartGame(true);\n  };\n\n  const drawCards = async () => {\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=2`\n    );\n    const data = await response.json();\n\n    setMyCards(data.cards);\n    setDrawn(true);\n\n    await drawComputerCards();\n  };\n\n  // NOTES\n\n  const drawComputerCards = async () => {\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=2`\n    );\n    const data = await response.json();\n\n    setComputerHand(data.cards);\n  };\n\n  const drawFlop = async () => {\n    setAnte(ante + 20);\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=3`\n    );\n    const data = await response.json();\n\n    setFlop(data.cards);\n    setFlopped(true);\n    setPlayerChips(playerChips - 10);\n  };\n\n  const hitCard = async () => {\n    setAnte(ante + 20);\n    setPlayerChips(playerChips - 10);\n\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=1`\n    );\n    const data = await response.json();\n\n    setTableCards([...tableCards, ...data.cards]);\n  };\n\n  const handleFinalRound = async () => {\n    setAnte(ante + 20);\n    setPlayerChips(playerChips - 10);\n    setFinalRound(true);\n\n    evaluateComputerHand();\n    evaluatePlayerHand();\n  };\n\n  useEffect(() => {\n    if (isBestHandComputer !== null && isBestHandPlayer !== null) {\n      compareHands();\n    }\n  }, [isBestHandComputer, isBestHandPlayer]);\n\n  const evaluatePlayerHand = () => {\n    const allPlayerCards = [...myCards, ...flop, ...tableCards];\n    console.log(\"PLAYER CARDS:\", allPlayerCards);\n\n    const playerBatch = allPlayerCards.map((card) => card.code);\n    console.log(\"PlayerBatch:\", playerBatch);\n\n    evaluateHand(playerBatch);\n  };\n\n  const evaluateComputerHand = () => {\n    const allComputerCards = [...computerHand, ...flop, ...tableCards];\n    console.log(\"COMPUTER CARDS\", allComputerCards);\n\n    const computerBatch = allComputerCards.map((card) => card.code);\n    console.log(\"COMPUTER BATCH POINTED:\", computerBatch);\n\n    evaluateHandComputer(computerBatch);\n  };\n\n  const evaluateHand = (batch) => {\n    straightCheck(batch);\n    flushCheck(batch);\n    fourKindCheck(batch);\n    threeKindCheck(batch);\n    twoKindCheck(batch);\n    highCardCheck(batch);\n  };\n\n  const evaluateHandComputer = (batch) => {\n    straightCheckComputer(batch);\n    flushCheckComputer(batch);\n    fourKindCheckComputer(batch);\n    threeKindCheckComputer(batch);\n    twoKindCheckComputer(batch);\n    highCardCheckComputer(batch);\n  };\n\n  const rankToHandConverter = (handType) => {\n    const handTypeMap = {\n      9: \"Straight Flush\",\n      8: \"Four of a Kind\",\n      7: \"Full House\",\n      6: \"Flush\",\n      5: \"Straight\",\n      4: \"Three of a Kind\",\n      3: \"Two Pair\",\n      2: \"Pair\",\n      1: \"High Card\",\n    };\n\n    return handTypeMap[handType];\n  };\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"center\"\n      justify=\"center\"\n      minH=\"100vh\"\n      w=\"100%\"\n      background=\"darkgreen\"\n    >\n      <Flex mb=\"auto\">\n        <Image width={[\"200px\",\"300px\",\"300px\",\"500px\",\"500px\"]} src={backgroundImage}  />\n      </Flex>\n      <Box\n          w=\"215px\"\n          h=\"100px\"\n          bg=\"gray.200\"\n          borderRadius=\"md\"\n          textAlign=\"center\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <VStack>\n            <Text fontWeight=\"bold\" fontSize=\"m\">\n              My Chips: {playerChips}\n            </Text>\n\n            <Text color=\"darkred\" fontWeight=\"bold\" fontSize=\"m\">\n              Ante: {ante}\n            </Text>\n          </VStack>\n        </Box>\n\n      <Flex>\n        {playerChips <= 0 && !activeSession && (\n          <VStack>\n            <Text>NO MORE CHIPS</Text>\n            <Button onClick={resetChips} colorScheme=\"blue\">\n              Buy Back: 100 Chips\n            </Button>\n          </VStack>\n        )}\n        {!activeSession && playerChips > 0 && (\n          <VStack spacing=\"4\" align=\"center\">\n            <Button pt={10} mb=\"50vh\" onClick={retrieveDeck} colorScheme=\"blue\">\n              START GAME\n            </Button>\n          </VStack>\n        )}\n        {activeSession && !myCards && (\n          <VStack>\n            <Button mb=\"20vh\" onClick={drawCards} disabled={drawn} colorScheme=\"green\">\n              DRAW CARDS\n            </Button>\n          </VStack>\n        )}\n        {activeSession && myCards && (\n          <VStack>\n            <Text fontSize=\"xl\">COMPUTER'S CARDS:</Text>\n            <Flex>\n              {finalRound ? (\n                computerHand.map((card, index) => (\n                  <Image\n                    key={`${card.code}-${index}`}\n                    src={card.image}\n                    boxSize=\"100px\"\n                  />\n                ))\n              ) : (\n                <>\n                  <Image\n                    src=\"https://www.deckofcardsapi.com/static/img/back.png\"\n                    boxSize=\"100px\"\n                  />\n                  <Image\n                    src=\"https://www.deckofcardsapi.com/static/img/back.png\"\n                    boxSize=\"100px\"\n                  />\n                </>\n              )}\n            </Flex>\n            <Text marginTop=\"40px\" fontSize=\"xl\">\n              MY CARDS:\n            </Text>\n            <Flex>\n              {myCards.map((card) => (\n                <Image key={card.code} src={card.image} boxSize=\"100px\" />\n              ))}\n            </Flex>\n\n            <VStack>\n              {!flop && (\n                <VStack>\n                  <Text>CALL: 10 Chips</Text>\n                  <Button onClick={drawFlop} colorScheme=\"teal\">\n                    DRAW FLOP\n                  </Button>\n                </VStack>\n              )}\n              <Text marginTop=\"40px\" fontSize=\"xl\">\n                TABLE\n              </Text>\n              <Flex>\n                {flop &&\n                  flop.map((card) => (\n                    <Image key={card.code} src={card.image} boxSize=\"100px\" />\n                  ))}\n                {tableCards.map((card, index) => (\n                  <Image\n                    key={`${card.code}-${index}`}\n                    src={card.image}\n                    boxSize=\"100px\"\n                  />\n                ))}\n                {flopped && tableCards.length === 0 && (\n                  <VStack>\n                    <Text>CALL: 10 Chips</Text>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={hitCard}\n                      colorScheme=\"yellow\"\n                    >\n                      CALL TURN\n                    </Button>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={turnRaise}\n                      colorScheme=\"pink\"\n                    >\n                      RAISE (+10)\n                    </Button>\n                  </VStack>\n                )}\n                {flopped && tableCards.length === 1 && (\n                  <VStack>\n                    <Text>CALL: 10 Chips</Text>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={hitCard}\n                      colorScheme=\"orange\"\n                    >\n                      CALL RIVER\n                    </Button>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={turnRaise}\n                      colorScheme=\"pink\"\n                    >\n                      RAISE (+10)\n                    </Button>\n                  </VStack>\n                )}\n                {tableCards.length === 2 && !finalRound && (\n                  <VStack>\n                    <Text>CALL: 10 Chips</Text>\n\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={handleFinalRound}\n                      colorScheme=\"purple\"\n                    >\n                      PLAY FINAL\n                    </Button>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={turnRaise}\n                      colorScheme=\"pink\"\n                    >\n                      RAISE (+10)\n                    </Button>\n                  </VStack>\n                )}\n              </Flex>\n              {!finalRound && (\n                <Button mb=\"10vh\" onClick={resetGame} colorScheme=\"red\">\n                  FOLD\n                </Button>\n              )}\n              {finalRound && (\n                <Button onClick={resetGame} colorScheme=\"cyan\">\n                  NEW GAME\n                </Button>\n              )}\n              {isWinner === \"player\" && (\n                <Box>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    PLAYER WINS!\n                  </Text>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    {rankToHandConverter(isBestHandPlayer)}\n                  </Text>\n                </Box>\n              )}\n              {isWinner === \"computer\" && (\n                <Box>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    COMPUTER WINS!\n                  </Text>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    {rankToHandConverter(isBestHandComputer)}\n                  </Text>\n                </Box>\n              )}\n              {isWinner === \"tie\" && (\n                <Box>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    TIE\n                  </Text>\n                </Box>\n              )}\n            </VStack>\n          </VStack>\n        )}\n\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default StartGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}