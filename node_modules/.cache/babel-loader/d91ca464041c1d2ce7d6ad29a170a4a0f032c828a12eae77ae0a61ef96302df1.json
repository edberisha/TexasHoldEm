{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Button,Flex,Image,Text,VStack,Box,HStack}from\"@chakra-ui/react\";import backgroundImage from\"./LOGO.png\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function StartGame(){// ALL INSTANCES OF STATE\nconst initialPlayerChips=100;const[playerChips,setPlayerChips]=useState(initialPlayerChips);const[activeSession,setActiveSession]=useState(false);const[myDeck,setMyDeck]=useState(null);const[myCards,setMyCards]=useState(null);const[drawn,setDrawn]=useState(false);const[flop,setFlop]=useState(null);const[flopped,setFlopped]=useState(false);const[startGame,setStartGame]=useState(false);const[tableCards,setTableCards]=useState([]);const[computerHand,setComputerHand]=useState(null);const[finalRound,setFinalRound]=useState(false);const[ante,setAnte]=useState(0);const[isBestHandPlayer,setIsBestHandPlayer]=useState(null);const[isBestHandComputer,setIsBestHandComputer]=useState(null);// PLAYER HAND POSSIBILITIES\nconst[isStraight,setIsStraight]=useState(false);const[isFourKind,setIsFourKind]=useState(false);const[isThreeKind,setIsThreeKind]=useState(false);const[isTwoKind,setIsTwoKind]=useState(false);const[isFlush,setIsFlush]=useState(false);const[isTwoPair,setIsTwoPair]=useState(false);const[isStraightFlush,setIsStraightFlush]=useState(false);const[isHighCard,setIsHighCard]=useState(false);const[isWinner,setIsWinner]=useState(null);// COMPUTER HAND POSSIBILITIES\nconst[isStraightComputer,setIsStraightComputer]=useState(false);const[isFourKindComputer,setIsFourKindComputer]=useState(false);const[isThreeKindComputer,setIsThreeKindComputer]=useState(false);const[isTwoKindComputer,setIsTwoKindComputer]=useState(false);const[isFlushComputer,setIsFlushComputer]=useState(false);const[isTwoPairComputer,setIsTwoPairComputer]=useState(false);const[isStraightFlushComputer,setIsStraightFlushComputer]=useState(false);const[isHighCardComputer,setIsHighCardComputer]=useState(false);// STRAIGHT CHECK\nconst straightCheck=batch=>{const faceToInteger={0:10,J:11,Q:12,K:13,A:14};console.log(\"FACETOIN\",faceToInteger);const intAssesser=batch.map(card=>{const firstCharacter=card[0];console.log(\"First Character:\",firstCharacter);return faceToInteger[firstCharacter]||parseInt(firstCharacter);});intAssesser.sort((a,b)=>a-b);console.log(\"AFTER SORT:\",intAssesser);let consecutiveCount=1;for(let i=0;i<intAssesser.length-1;i++){if(intAssesser[i+1]-intAssesser[i]===1){consecutiveCount++;console.log(\"Consecutive Count:\",consecutiveCount);if(consecutiveCount>=5){setIsStraight(true);return true;}}else{consecutiveCount=1;}}return null;};// 4 OF-A-KIND CHECK\nconst fourKindCheck=batch=>{const rankCounts={};batch.forEach(card=>{const rank=card[0];rankCounts[rank]=(rankCounts[rank]||0)+1;console.log(\"4-OF-KIND RANK-COUNTS CHECK:\",rankCounts);});for(const rank in rankCounts){if(rankCounts[rank]>=4){setIsFourKind(true);return rank;}}return null;};// 3 OF-A-KIND CHECK\nconst threeKindCheck=batch=>{const rankCounts={};batch.forEach(card=>{const rank=card[0];rankCounts[rank]=(rankCounts[rank]||0)+1;console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\",rankCounts);});for(const rank in rankCounts){if(rankCounts[rank]>=3){setIsThreeKind(true);return rank;}}return null;};// 2 OF-A-KIND CHECK\nconst twoKindCheck=batch=>{const rankCounts={};let pairCount=0;batch.forEach(card=>{const rank=card[0];rankCounts[rank]=(rankCounts[rank]||0)+1;console.log(\"2-OF-KIND RANK-COUNTS CHECK:\",rankCounts);});for(const rank in rankCounts){if(rankCounts[rank]>=2){setIsTwoKind(true);pairCount++;}}if(pairCount>=2){setIsTwoPair(true);}return null;};const playerWinsChips=()=>{setPlayerChips(ante+playerChips);};useEffect(()=>{if(isWinner===\"player\"){playerWinsChips();}},[isWinner]);const turnRaise=()=>{if(playerChips>=10){setAnte(ante+10);setPlayerChips(playerChips-10);}else{console.log(\"Not enough chips\");}};// PLAYER HAND USE EFFECT\nuseEffect(()=>{console.log(\"isStraight:\",isStraight);console.log(\"isFlush:\",isFlush);console.log(\"isFourKind:\",isFourKind);console.log(\"isThreeKind:\",isThreeKind);console.log(\"isTwoKind:\",isTwoKind);console.log(\"isHighCard:\",isHighCard);console.log(\"isTwoPair:\",isTwoPair);if(isStraight&&isFlush){console.log(\"STRONGEST HAND: Straight Flush\");setIsBestHandPlayer(9);}else if(isFourKind){console.log(\"STRONGEST HAND: Four of a Kind\");setIsBestHandPlayer(8);}else if(isTwoPair&&isThreeKind){console.log(\"STRONGEST HAND: Full House\");setIsBestHandPlayer(7);}else if(isFlush){console.log(\"STRONGEST HAND: Flush\");setIsBestHandPlayer(6);}else if(isStraight){console.log(\"STRONGEST HAND: Straight\");setIsBestHandPlayer(5);}else if(isThreeKind){console.log(\"STRONGEST HAND: Three of a Kind\");setIsBestHandPlayer(4);}else if(isTwoPair){console.log(\"STRONGEST HAND: Two Pair\");setIsBestHandPlayer(3);}else if(isTwoKind){console.log(\"STRONGEST HAND: Pair\");setIsBestHandPlayer(2);}else if(isHighCard){console.log(\"STRONGEST HAND: High Card\");setIsBestHandPlayer(1);}},[isStraight,isFlush,isFourKind,isThreeKind,isTwoKind,isHighCard,isTwoPair]);// COMPUTER HAND USE EFFECT\nuseEffect(()=>{console.log(\"isStraightComputer:\",isStraightComputer);console.log(\"isFlushComputer:\",isFlushComputer);console.log(\"isFourKindComputer:\",isFourKindComputer);console.log(\"isThreeKindComputer:\",isThreeKindComputer);console.log(\"isTwoKindComputer:\",isTwoKindComputer);console.log(\"isHighCardComputer:\",isHighCardComputer);console.log(\"isTwoPairComputer:\",isTwoPairComputer);if(isStraightComputer&&isFlushComputer){console.log(\"STRONGEST HAND: Straight FlushComputer\");setIsBestHandComputer(9);}else if(isFourKindComputer){console.log(\"STRONGEST HAND: Four of a KindComputer\");setIsBestHandComputer(8);}else if(isTwoPairComputer&&isThreeKindComputer){console.log(\"STRONGEST HAND: Full HouseComputer\");setIsBestHandComputer(7);}else if(isFlushComputer){console.log(\"STRONGEST HAND: FlushComputer\");setIsBestHandComputer(6);}else if(isStraightComputer){console.log(\"STRONGEST HAND: StraightComputer\");setIsBestHandComputer(5);}else if(isThreeKindComputer){console.log(\"STRONGEST HAND: Three of a KindComputer\");setIsBestHandComputer(4);}else if(isTwoPairComputer){console.log(\"STRONGEST HAND: Two PairComputer\");setIsBestHandComputer(3);}else if(isTwoKindComputer){console.log(\"STRONGEST HAND: PairComputer\");setIsBestHandComputer(2);}else if(isHighCardComputer){console.log(\"STRONGEST HAND: High CardComputer\");setIsBestHandComputer(1);}},[isStraightComputer,isFlushComputer,isFourKindComputer,isThreeKindComputer,isTwoKindComputer,isHighCardComputer,isTwoPairComputer]);const evaluatePairRank=hand=>{const faceToInteger={J:11,Q:12,K:13,A:14};const ranks={};hand.forEach(card=>{const rank=card[0];ranks[rank]=(ranks[rank]||0)+1;});let pairRank=0;for(const rank in ranks){if(ranks[rank]===2&&(faceToInteger[rank]||parseInt(rank))>pairRank){pairRank=faceToInteger[rank]||parseInt(rank);}}return pairRank;};const resetChips=()=>{setPlayerChips(playerChips+100);};const compareHands=()=>{console.log(\"BEST HAND COMPUTER\",isBestHandComputer);console.log(\"BEST HAND PLAYER\",isBestHandPlayer);if(isBestHandComputer>isBestHandPlayer){console.log(\"COMPUTER WINS\");setIsWinner(\"computer\");}else if(isBestHandPlayer>isBestHandComputer){setPlayerChips(playerChips+ante);console.log(\"PLAYER WINS\");setIsWinner(\"player\");}else if(isBestHandComputer===2&&isBestHandPlayer===2){const playerBatch=[...myCards.map(card=>card.code),...flop.map(card=>card.code),...tableCards.map(card=>card.code)];const computerBatch=[...computerHand.map(card=>card.code),...flop.map(card=>card.code),...tableCards.map(card=>card.code)];const playerPairRank=evaluatePairRank(playerBatch);const computerPairRank=evaluatePairRank(computerBatch);if(playerPairRank>computerPairRank){console.log(\"PLAYER WINS\");setIsWinner(\"player\");}else if(computerPairRank>playerPairRank){console.log(\"COMPUTER WINS\");setIsWinner(\"computer\");}else{const playerNonPairCards=playerBatch.filter(card=>card!==playerPairRank);const computerNonPairCards=computerBatch.filter(card=>card!==computerPairRank);playerNonPairCards.sort((a,b)=>b-a);computerNonPairCards.sort((a,b)=>b-a);if(playerNonPairCards[0]>computerNonPairCards[0]){console.log(\"PLAYER WINS with higher non-pair card\");setIsWinner(\"player\");}else if(playerNonPairCards[0]<computerNonPairCards[0]){console.log(\"COMPUTER WINS with higher non-pair card\");setIsWinner(\"computer\");}else{console.log(\"TIE\");setIsWinner(\"tie\");}}}};// FLUSH CHECK\nconst flushCheck=batch=>{const suitCounts={};batch.forEach(card=>{const suit=card[1];suitCounts[suit]=(suitCounts[suit]||0)+1;console.log(\"SUIT-COUNTS CHECK:\",suitCounts);});for(const suit in suitCounts){if(suitCounts[suit]>=5){setIsFlush(true);return suit;}}return null;};// HIGH CARD CHECK\nconst highCardCheck=batch=>{let highestCard=null;setIsHighCard(true);batch.forEach(card=>{const faceToInteger={J:11,Q:12,K:13,A:14};const rank=card[0];const rankValue=faceToInteger[rank]||parseInt(rank);if(!highestCard||rankValue>highestCard.value){highestCard={rank,value:rankValue};}});const highCard=highestCard.rank;console.log(\"THE BATCH IN QUESTION --->\",batch,highCard);return highCard;};// STRAIGHT CHECK COMPUTER\nconst straightCheckComputer=batch=>{const faceToInteger={0:10,J:11,Q:12,K:13,A:14};console.log(\"FACETOIN\",faceToInteger);const intAssesser=batch.map(card=>{const firstCharacter=card[0];console.log(\"First Character:\",firstCharacter);return faceToInteger[firstCharacter]||parseInt(firstCharacter);});intAssesser.sort((a,b)=>a-b);console.log(\"AFTER SORT:\",intAssesser);let consecutiveCount=1;for(let i=0;i<intAssesser.length-1;i++){if(intAssesser[i+1]-intAssesser[i]===1){consecutiveCount++;console.log(\"Consecutive Count:\",consecutiveCount);if(consecutiveCount>=5){setIsStraightComputer(true);return true;}}else{consecutiveCount=1;}}return null;};// 4 OF-A-KIND CHECK COMPUTER\nconst fourKindCheckComputer=batch=>{const rankCounts={};batch.forEach(card=>{const rank=card[0];rankCounts[rank]=(rankCounts[rank]||0)+1;console.log(\"4-OF-KIND RANK-COUNTS CHECK:\",rankCounts);});for(const rank in rankCounts){if(rankCounts[rank]>=4){setIsFourKindComputer(true);return rank;}}return null;};// 3 OF-A-KIND CHECK COMPUTER\nconst threeKindCheckComputer=batch=>{const rankCounts={};batch.forEach(card=>{const rank=card[0];rankCounts[rank]=(rankCounts[rank]||0)+1;console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\",rankCounts);});for(const rank in rankCounts){if(rankCounts[rank]>=3){setIsThreeKindComputer(true);return rank;}}return null;};// 2 OF-A-KIND CHECK COMPUTER\nconst twoKindCheckComputer=batch=>{const rankCounts={};let pairCount=0;batch.forEach(card=>{const rank=card[0];rankCounts[rank]=(rankCounts[rank]||0)+1;console.log(\"2-OF-KIND RANK-COUNTS CHECK:\",rankCounts);});for(const rank in rankCounts){if(rankCounts[rank]>=2){setIsTwoKindComputer(true);pairCount++;}}if(pairCount>=2){setIsTwoPairComputer(true);}return null;};// FLUSH CHECK COMPUTER\nconst flushCheckComputer=batch=>{const suitCounts={};batch.forEach(card=>{const suit=card[1];suitCounts[suit]=(suitCounts[suit]||0)+1;console.log(\"SUIT-COUNTS CHECK:\",suitCounts);});for(const suit in suitCounts){if(suitCounts[suit]>=5){setIsFlushComputer(true);return suit;}}return null;};// HIGH CARD CHECK COMPUTER\nconst highCardCheckComputer=batch=>{let highestCard=null;setIsHighCardComputer(true);batch.forEach(card=>{const faceToInteger={J:11,Q:12,K:13,A:14};const rank=card[0];const rankValue=faceToInteger[rank]||parseInt(rank);if(!highestCard||rankValue>highestCard.value){highestCard={rank,value:rankValue};}});const highCard=highestCard.rank;console.log(\"HIGH CARD\",highCard);return highCard;};const resetGame=()=>{setActiveSession(false);setMyDeck(null);setMyCards(null);setDrawn(false);setFlop(null);setFlopped(false);setStartGame(false);setTableCards([]);setComputerHand(null);setFinalRound(false);setAnte(0);setIsFourKind(false);setIsThreeKind(false);setIsTwoKind(false);setIsFlush(false);setIsStraight(false);setIsStraightFlush(false);setIsTwoPair(false);setIsFourKindComputer(false);setIsThreeKindComputer(false);setIsTwoKindComputer(false);setIsFlushComputer(false);setIsStraightFlushComputer(false);setIsTwoPairComputer(false);setIsBestHandComputer(null);setIsBestHandPlayer(null);setIsStraightComputer(false);setIsWinner(null);};const retrieveDeck=async()=>{const response=await fetch(\"https://www.deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\");const data=await response.json();setMyDeck(data.deck_id);setActiveSession(true);setStartGame(true);};const drawCards=async()=>{const response=await fetch(\"https://www.deckofcardsapi.com/api/deck/\".concat(myDeck,\"/draw/?count=2\"));const data=await response.json();setMyCards(data.cards);setDrawn(true);await drawComputerCards();};// NOTES\nconst drawComputerCards=async()=>{const response=await fetch(\"https://www.deckofcardsapi.com/api/deck/\".concat(myDeck,\"/draw/?count=2\"));const data=await response.json();setComputerHand(data.cards);};const drawFlop=async()=>{setAnte(ante+20);const response=await fetch(\"https://www.deckofcardsapi.com/api/deck/\".concat(myDeck,\"/draw/?count=3\"));const data=await response.json();setFlop(data.cards);setFlopped(true);setPlayerChips(playerChips-10);};const hitCard=async()=>{setAnte(ante+20);setPlayerChips(playerChips-10);const response=await fetch(\"https://www.deckofcardsapi.com/api/deck/\".concat(myDeck,\"/draw/?count=1\"));const data=await response.json();setTableCards([...tableCards,...data.cards]);};const handleFinalRound=async()=>{setAnte(ante+20);setPlayerChips(playerChips-10);setFinalRound(true);evaluateComputerHand();evaluatePlayerHand();};useEffect(()=>{if(isBestHandComputer!==null&&isBestHandPlayer!==null){compareHands();}},[isBestHandComputer,isBestHandPlayer]);const evaluatePlayerHand=()=>{const allPlayerCards=[...myCards,...flop,...tableCards];console.log(\"PLAYER CARDS:\",allPlayerCards);const playerBatch=allPlayerCards.map(card=>card.code);console.log(\"PlayerBatch:\",playerBatch);evaluateHand(playerBatch);};const evaluateComputerHand=()=>{const allComputerCards=[...computerHand,...flop,...tableCards];console.log(\"COMPUTER CARDS\",allComputerCards);const computerBatch=allComputerCards.map(card=>card.code);console.log(\"COMPUTER BATCH POINTED:\",computerBatch);evaluateHandComputer(computerBatch);};const evaluateHand=batch=>{straightCheck(batch);flushCheck(batch);fourKindCheck(batch);threeKindCheck(batch);twoKindCheck(batch);highCardCheck(batch);};const evaluateHandComputer=batch=>{straightCheckComputer(batch);flushCheckComputer(batch);fourKindCheckComputer(batch);threeKindCheckComputer(batch);twoKindCheckComputer(batch);highCardCheckComputer(batch);};const rankToHandConverter=handType=>{const handTypeMap={9:\"Straight Flush\",8:\"Four of a Kind\",7:\"Full House\",6:\"Flush\",5:\"Straight\",4:\"Three of a Kind\",3:\"Two Pair\",2:\"Pair\",1:\"High Card\"};return handTypeMap[handType];};return/*#__PURE__*/_jsxs(Flex,{direction:\"column\",align:\"center\",justify:\"center\",minH:\"100vh\",w:\"100%\",background:\"darkgreen\",children:[/*#__PURE__*/_jsx(Flex,{mb:\"auto\",children:/*#__PURE__*/_jsx(Image,{width:[\"200px\",\"300px\",\"300px\",\"500px\",\"500px\"],src:backgroundImage})}),/*#__PURE__*/_jsx(Box,{w:\"215px\",h:\"100px\",bg:\"gray.200\",borderRadius:\"md\",textAlign:\"center\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",children:/*#__PURE__*/_jsxs(VStack,{children:[/*#__PURE__*/_jsxs(Text,{fontWeight:\"bold\",fontSize:\"m\",children:[\"My Chips: \",playerChips]}),/*#__PURE__*/_jsxs(Text,{color:\"darkred\",fontWeight:\"bold\",fontSize:\"m\",children:[\"Ante: \",ante]})]})}),/*#__PURE__*/_jsxs(Flex,{children:[playerChips<=0&&!activeSession&&/*#__PURE__*/_jsxs(VStack,{children:[/*#__PURE__*/_jsx(Text,{children:\"NO MORE CHIPS\"}),/*#__PURE__*/_jsx(Button,{onClick:resetChips,colorScheme:\"blue\",children:\"Buy Back: 100 Chips\"})]}),!activeSession&&playerChips>0&&/*#__PURE__*/_jsx(VStack,{pt:\"10\",spacing:\"4\",align:\"center\",children:/*#__PURE__*/_jsx(Button,{mb:\"50vh\",onClick:retrieveDeck,colorScheme:\"blue\",children:\"START GAME\"})}),activeSession&&!myCards&&/*#__PURE__*/_jsx(VStack,{pt:\"10\",children:/*#__PURE__*/_jsx(Button,{mb:\"40vh\",onClick:drawCards,disabled:drawn,colorScheme:\"green\",children:\"DRAW CARDS\"})}),activeSession&&myCards&&/*#__PURE__*/_jsxs(VStack,{children:[/*#__PURE__*/_jsx(Text,{color:\"white\",fontSize:\"xl\",children:\"COMPUTER'S CARDS:\"}),/*#__PURE__*/_jsx(Flex,{children:finalRound?computerHand.map((card,index)=>/*#__PURE__*/_jsx(Image,{src:card.image,boxSize:\"100px\"},\"\".concat(card.code,\"-\").concat(index))):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Image,{src:\"https://www.deckofcardsapi.com/static/img/back.png\",boxSize:\"100px\"}),/*#__PURE__*/_jsx(Image,{src:\"https://www.deckofcardsapi.com/static/img/back.png\",boxSize:\"100px\"})]})}),/*#__PURE__*/_jsx(Text,{color:\"white\",marginTop:\"40px\",fontSize:\"xl\",children:\"MY CARDS:\"}),/*#__PURE__*/_jsx(Flex,{children:myCards.map(card=>/*#__PURE__*/_jsx(Image,{src:card.image,boxSize:\"100px\"},card.code))}),/*#__PURE__*/_jsxs(VStack,{children:[!flop&&/*#__PURE__*/_jsxs(VStack,{children:[/*#__PURE__*/_jsx(Text,{children:\"CALL: 10 Chips\"}),/*#__PURE__*/_jsx(Button,{onClick:drawFlop,colorScheme:\"teal\",children:\"DRAW FLOP\"})]}),/*#__PURE__*/_jsx(Text,{marginTop:\"40px\",fontSize:\"xl\",children:\"TABLE\"}),/*#__PURE__*/_jsxs(Flex,{children:[flop&&flop.map(card=>/*#__PURE__*/_jsx(Image,{src:card.image,boxSize:\"100px\"},card.code)),tableCards.map((card,index)=>/*#__PURE__*/_jsx(Image,{src:card.image,boxSize:\"100px\"},\"\".concat(card.code,\"-\").concat(index))),flopped&&tableCards.length===0&&/*#__PURE__*/_jsxs(VStack,{children:[/*#__PURE__*/_jsx(Text,{children:\"CALL: 10 Chips\"}),/*#__PURE__*/_jsx(Button,{marginLeft:\"20px\",onClick:hitCard,colorScheme:\"yellow\",children:\"CALL TURN\"}),/*#__PURE__*/_jsx(Button,{marginLeft:\"20px\",onClick:turnRaise,colorScheme:\"pink\",children:\"RAISE (+10)\"})]}),flopped&&tableCards.length===1&&/*#__PURE__*/_jsxs(VStack,{children:[/*#__PURE__*/_jsx(Text,{children:\"CALL: 10 Chips\"}),/*#__PURE__*/_jsx(Button,{marginLeft:\"20px\",onClick:hitCard,colorScheme:\"orange\",children:\"CALL RIVER\"}),/*#__PURE__*/_jsx(Button,{marginLeft:\"20px\",onClick:turnRaise,colorScheme:\"pink\",children:\"RAISE (+10)\"})]}),tableCards.length===2&&!finalRound&&/*#__PURE__*/_jsxs(VStack,{children:[/*#__PURE__*/_jsx(Text,{children:\"CALL: 10 Chips\"}),/*#__PURE__*/_jsx(Button,{marginLeft:\"20px\",onClick:handleFinalRound,colorScheme:\"purple\",children:\"PLAY FINAL\"}),/*#__PURE__*/_jsx(Button,{marginLeft:\"20px\",onClick:turnRaise,colorScheme:\"pink\",children:\"RAISE (+10)\"})]})]}),!finalRound&&/*#__PURE__*/_jsx(Button,{mb:\"10vh\",onClick:resetGame,colorScheme:\"red\",children:\"FOLD\"}),finalRound&&/*#__PURE__*/_jsx(Button,{onClick:resetGame,colorScheme:\"cyan\",children:\"NEW GAME\"}),isWinner===\"player\"&&/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Text,{color:\"red\",fontWeight:\"bold\",fontSize:\"40\",textAlign:\"center\",style:{WebkitTextStroke:\"1px white\",WebkitTextFillColor:\"red\"},children:\"PLAYER WINS!\"}),/*#__PURE__*/_jsx(Text,{color:\"red\",fontWeight:\"bold\",fontSize:\"40\",textAlign:\"center\",style:{WebkitTextStroke:\"1px white\",WebkitTextFillColor:\"red\"},children:rankToHandConverter(isBestHandPlayer)})]}),isWinner===\"computer\"&&/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Text,{color:\"red\",fontWeight:\"bold\",fontSize:\"40\",textAlign:\"center\",style:{WebkitTextStroke:\"1px white\",WebkitTextFillColor:\"red\"},children:\"COMPUTER WINS!\"}),/*#__PURE__*/_jsx(Text,{color:\"red\",fontWeight:\"bold\",fontSize:\"40\",textAlign:\"center\",style:{WebkitTextStroke:\"1px white\",WebkitTextFillColor:\"red\"},children:rankToHandConverter(isBestHandComputer)})]}),isWinner===\"tie\"&&/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsx(Text,{color:\"red\",fontWeight:\"bold\",fontSize:\"40\",textAlign:\"center\",style:{WebkitTextStroke:\"1px white\",WebkitTextFillColor:\"red\"},children:\"TIE\"})})]})]})]})]});}export default StartGame;","map":{"version":3,"names":["React","useState","useEffect","Button","Flex","Image","Text","VStack","Box","HStack","backgroundImage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","StartGame","initialPlayerChips","playerChips","setPlayerChips","activeSession","setActiveSession","myDeck","setMyDeck","myCards","setMyCards","drawn","setDrawn","flop","setFlop","flopped","setFlopped","startGame","setStartGame","tableCards","setTableCards","computerHand","setComputerHand","finalRound","setFinalRound","ante","setAnte","isBestHandPlayer","setIsBestHandPlayer","isBestHandComputer","setIsBestHandComputer","isStraight","setIsStraight","isFourKind","setIsFourKind","isThreeKind","setIsThreeKind","isTwoKind","setIsTwoKind","isFlush","setIsFlush","isTwoPair","setIsTwoPair","isStraightFlush","setIsStraightFlush","isHighCard","setIsHighCard","isWinner","setIsWinner","isStraightComputer","setIsStraightComputer","isFourKindComputer","setIsFourKindComputer","isThreeKindComputer","setIsThreeKindComputer","isTwoKindComputer","setIsTwoKindComputer","isFlushComputer","setIsFlushComputer","isTwoPairComputer","setIsTwoPairComputer","isStraightFlushComputer","setIsStraightFlushComputer","isHighCardComputer","setIsHighCardComputer","straightCheck","batch","faceToInteger","J","Q","K","A","console","log","intAssesser","map","card","firstCharacter","parseInt","sort","a","b","consecutiveCount","i","length","fourKindCheck","rankCounts","forEach","rank","threeKindCheck","twoKindCheck","pairCount","playerWinsChips","turnRaise","evaluatePairRank","hand","ranks","pairRank","resetChips","compareHands","playerBatch","code","computerBatch","playerPairRank","computerPairRank","playerNonPairCards","filter","computerNonPairCards","flushCheck","suitCounts","suit","highCardCheck","highestCard","rankValue","value","highCard","straightCheckComputer","fourKindCheckComputer","threeKindCheckComputer","twoKindCheckComputer","flushCheckComputer","highCardCheckComputer","resetGame","retrieveDeck","response","fetch","data","json","deck_id","drawCards","concat","cards","drawComputerCards","drawFlop","hitCard","handleFinalRound","evaluateComputerHand","evaluatePlayerHand","allPlayerCards","evaluateHand","allComputerCards","evaluateHandComputer","rankToHandConverter","handType","handTypeMap","direction","align","justify","minH","w","background","children","mb","width","src","h","bg","borderRadius","textAlign","display","justifyContent","alignItems","fontWeight","fontSize","color","onClick","colorScheme","pt","spacing","disabled","index","image","boxSize","marginTop","marginLeft","style","WebkitTextStroke","WebkitTextFillColor"],"sources":["/Users/computeraccount/Documents/texasholdem/TexasHoldEm/src/StartGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Flex,\n  Image,\n  Text,\n  VStack,\n  Box,\n  HStack,\n} from \"@chakra-ui/react\";\nimport backgroundImage from \"./LOGO.png\";\n\nfunction StartGame() {\n  // ALL INSTANCES OF STATE\n  const initialPlayerChips = 100;\n  const [playerChips, setPlayerChips] = useState(initialPlayerChips);\n  const [activeSession, setActiveSession] = useState(false);\n  const [myDeck, setMyDeck] = useState(null);\n  const [myCards, setMyCards] = useState(null);\n  const [drawn, setDrawn] = useState(false);\n  const [flop, setFlop] = useState(null);\n  const [flopped, setFlopped] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [tableCards, setTableCards] = useState([]);\n  const [computerHand, setComputerHand] = useState(null);\n  const [finalRound, setFinalRound] = useState(false);\n  const [ante, setAnte] = useState(0);\n  const [isBestHandPlayer, setIsBestHandPlayer] = useState(null);\n  const [isBestHandComputer, setIsBestHandComputer] = useState(null);\n\n  // PLAYER HAND POSSIBILITIES\n  const [isStraight, setIsStraight] = useState(false);\n  const [isFourKind, setIsFourKind] = useState(false);\n  const [isThreeKind, setIsThreeKind] = useState(false);\n  const [isTwoKind, setIsTwoKind] = useState(false);\n  const [isFlush, setIsFlush] = useState(false);\n  const [isTwoPair, setIsTwoPair] = useState(false);\n  const [isStraightFlush, setIsStraightFlush] = useState(false);\n  const [isHighCard, setIsHighCard] = useState(false);\n  const [isWinner, setIsWinner] = useState(null);\n\n  // COMPUTER HAND POSSIBILITIES\n  const [isStraightComputer, setIsStraightComputer] = useState(false);\n  const [isFourKindComputer, setIsFourKindComputer] = useState(false);\n  const [isThreeKindComputer, setIsThreeKindComputer] = useState(false);\n  const [isTwoKindComputer, setIsTwoKindComputer] = useState(false);\n  const [isFlushComputer, setIsFlushComputer] = useState(false);\n  const [isTwoPairComputer, setIsTwoPairComputer] = useState(false);\n  const [isStraightFlushComputer, setIsStraightFlushComputer] = useState(false);\n  const [isHighCardComputer, setIsHighCardComputer] = useState(false);\n\n  // STRAIGHT CHECK\n  const straightCheck = (batch) => {\n    const faceToInteger = {\n      0: 10,\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14,\n    };\n    console.log(\"FACETOIN\", faceToInteger);\n\n    const intAssesser = batch.map((card) => {\n      const firstCharacter = card[0];\n      console.log(\"First Character:\", firstCharacter);\n      return faceToInteger[firstCharacter] || parseInt(firstCharacter);\n    });\n\n    intAssesser.sort((a, b) => a - b);\n    console.log(\"AFTER SORT:\", intAssesser);\n\n    let consecutiveCount = 1;\n    for (let i = 0; i < intAssesser.length - 1; i++) {\n      if (intAssesser[i + 1] - intAssesser[i] === 1) {\n        consecutiveCount++;\n        console.log(\"Consecutive Count:\", consecutiveCount);\n\n        if (consecutiveCount >= 5) {\n          setIsStraight(true);\n          return true;\n        }\n      } else {\n        consecutiveCount = 1;\n      }\n    }\n\n    return null;\n  };\n\n  // 4 OF-A-KIND CHECK\n\n  const fourKindCheck = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"4-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 4) {\n        setIsFourKind(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 3 OF-A-KIND CHECK\n\n  const threeKindCheck = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 3) {\n        setIsThreeKind(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 2 OF-A-KIND CHECK\n\n  const twoKindCheck = (batch) => {\n    const rankCounts = {};\n    let pairCount = 0;\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"2-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 2) {\n        setIsTwoKind(true);\n        pairCount++;\n      }\n    }\n\n    if (pairCount >= 2) {\n      setIsTwoPair(true);\n    }\n\n    return null;\n  };\n\n  const playerWinsChips = () => {\n    setPlayerChips(ante + playerChips);\n  };\n\n  useEffect(() => {\n    if (isWinner === \"player\") {\n      playerWinsChips();\n    }\n  }, [isWinner]);\n\n  const turnRaise = () => {\n    if (playerChips >= 10) {\n      setAnte(ante + 10);\n      setPlayerChips(playerChips - 10);\n    } else {\n      console.log(\"Not enough chips\");\n    }\n  };\n\n  // PLAYER HAND USE EFFECT\n  useEffect(() => {\n    console.log(\"isStraight:\", isStraight);\n    console.log(\"isFlush:\", isFlush);\n    console.log(\"isFourKind:\", isFourKind);\n    console.log(\"isThreeKind:\", isThreeKind);\n    console.log(\"isTwoKind:\", isTwoKind);\n    console.log(\"isHighCard:\", isHighCard);\n    console.log(\"isTwoPair:\", isTwoPair);\n\n    if (isStraight && isFlush) {\n      console.log(\"STRONGEST HAND: Straight Flush\");\n      setIsBestHandPlayer(9);\n    } else if (isFourKind) {\n      console.log(\"STRONGEST HAND: Four of a Kind\");\n      setIsBestHandPlayer(8);\n    } else if (isTwoPair && isThreeKind) {\n      console.log(\"STRONGEST HAND: Full House\");\n      setIsBestHandPlayer(7);\n    } else if (isFlush) {\n      console.log(\"STRONGEST HAND: Flush\");\n      setIsBestHandPlayer(6);\n    } else if (isStraight) {\n      console.log(\"STRONGEST HAND: Straight\");\n      setIsBestHandPlayer(5);\n    } else if (isThreeKind) {\n      console.log(\"STRONGEST HAND: Three of a Kind\");\n      setIsBestHandPlayer(4);\n    } else if (isTwoPair) {\n      console.log(\"STRONGEST HAND: Two Pair\");\n      setIsBestHandPlayer(3);\n    } else if (isTwoKind) {\n      console.log(\"STRONGEST HAND: Pair\");\n      setIsBestHandPlayer(2);\n    } else if (isHighCard) {\n      console.log(\"STRONGEST HAND: High Card\");\n      setIsBestHandPlayer(1);\n    }\n  }, [\n    isStraight,\n    isFlush,\n    isFourKind,\n    isThreeKind,\n    isTwoKind,\n    isHighCard,\n    isTwoPair,\n  ]);\n\n  // COMPUTER HAND USE EFFECT\n\n  useEffect(() => {\n    console.log(\"isStraightComputer:\", isStraightComputer);\n    console.log(\"isFlushComputer:\", isFlushComputer);\n    console.log(\"isFourKindComputer:\", isFourKindComputer);\n    console.log(\"isThreeKindComputer:\", isThreeKindComputer);\n    console.log(\"isTwoKindComputer:\", isTwoKindComputer);\n    console.log(\"isHighCardComputer:\", isHighCardComputer);\n    console.log(\"isTwoPairComputer:\", isTwoPairComputer);\n\n    if (isStraightComputer && isFlushComputer) {\n      console.log(\"STRONGEST HAND: Straight FlushComputer\");\n      setIsBestHandComputer(9);\n    } else if (isFourKindComputer) {\n      console.log(\"STRONGEST HAND: Four of a KindComputer\");\n      setIsBestHandComputer(8);\n    } else if (isTwoPairComputer && isThreeKindComputer) {\n      console.log(\"STRONGEST HAND: Full HouseComputer\");\n      setIsBestHandComputer(7);\n    } else if (isFlushComputer) {\n      console.log(\"STRONGEST HAND: FlushComputer\");\n      setIsBestHandComputer(6);\n    } else if (isStraightComputer) {\n      console.log(\"STRONGEST HAND: StraightComputer\");\n      setIsBestHandComputer(5);\n    } else if (isThreeKindComputer) {\n      console.log(\"STRONGEST HAND: Three of a KindComputer\");\n      setIsBestHandComputer(4);\n    } else if (isTwoPairComputer) {\n      console.log(\"STRONGEST HAND: Two PairComputer\");\n      setIsBestHandComputer(3);\n    } else if (isTwoKindComputer) {\n      console.log(\"STRONGEST HAND: PairComputer\");\n      setIsBestHandComputer(2);\n    } else if (isHighCardComputer) {\n      console.log(\"STRONGEST HAND: High CardComputer\");\n      setIsBestHandComputer(1);\n    }\n  }, [\n    isStraightComputer,\n    isFlushComputer,\n    isFourKindComputer,\n    isThreeKindComputer,\n    isTwoKindComputer,\n    isHighCardComputer,\n    isTwoPairComputer,\n  ]);\n\n  const evaluatePairRank = (hand) => {\n    const faceToInteger = {\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14,\n    };\n\n    const ranks = {};\n    hand.forEach((card) => {\n      const rank = card[0];\n      ranks[rank] = (ranks[rank] || 0) + 1;\n    });\n\n    let pairRank = 0;\n    for (const rank in ranks) {\n      if (\n        ranks[rank] === 2 &&\n        (faceToInteger[rank] || parseInt(rank)) > pairRank\n      ) {\n        pairRank = faceToInteger[rank] || parseInt(rank);\n      }\n    }\n    return pairRank;\n  };\n\n  const resetChips = () => {\n    setPlayerChips(playerChips + 100);\n  };\n\n  const compareHands = () => {\n    console.log(\"BEST HAND COMPUTER\", isBestHandComputer);\n    console.log(\"BEST HAND PLAYER\", isBestHandPlayer);\n\n    if (isBestHandComputer > isBestHandPlayer) {\n      console.log(\"COMPUTER WINS\");\n      setIsWinner(\"computer\");\n    } else if (isBestHandPlayer > isBestHandComputer) {\n      setPlayerChips(playerChips + ante);\n      console.log(\"PLAYER WINS\");\n      setIsWinner(\"player\");\n    } else if (isBestHandComputer === 2 && isBestHandPlayer === 2) {\n      const playerBatch = [\n        ...myCards.map((card) => card.code),\n        ...flop.map((card) => card.code),\n        ...tableCards.map((card) => card.code),\n      ];\n      const computerBatch = [\n        ...computerHand.map((card) => card.code),\n        ...flop.map((card) => card.code),\n        ...tableCards.map((card) => card.code),\n      ];\n\n      const playerPairRank = evaluatePairRank(playerBatch);\n      const computerPairRank = evaluatePairRank(computerBatch);\n\n      if (playerPairRank > computerPairRank) {\n        console.log(\"PLAYER WINS\");\n        setIsWinner(\"player\");\n      } else if (computerPairRank > playerPairRank) {\n        console.log(\"COMPUTER WINS\");\n        setIsWinner(\"computer\");\n      } else {\n        const playerNonPairCards = playerBatch.filter(\n          (card) => card !== playerPairRank\n        );\n        const computerNonPairCards = computerBatch.filter(\n          (card) => card !== computerPairRank\n        );\n\n        playerNonPairCards.sort((a, b) => b - a);\n        computerNonPairCards.sort((a, b) => b - a);\n\n        if (playerNonPairCards[0] > computerNonPairCards[0]) {\n          console.log(\"PLAYER WINS with higher non-pair card\");\n          setIsWinner(\"player\");\n        } else if (playerNonPairCards[0] < computerNonPairCards[0]) {\n          console.log(\"COMPUTER WINS with higher non-pair card\");\n          setIsWinner(\"computer\");\n        } else {\n          console.log(\"TIE\");\n          setIsWinner(\"tie\");\n        }\n      }\n    }\n  };\n\n  // FLUSH CHECK\n\n  const flushCheck = (batch) => {\n    const suitCounts = {};\n\n    batch.forEach((card) => {\n      const suit = card[1];\n      suitCounts[suit] = (suitCounts[suit] || 0) + 1;\n      console.log(\"SUIT-COUNTS CHECK:\", suitCounts);\n    });\n\n    for (const suit in suitCounts) {\n      if (suitCounts[suit] >= 5) {\n        setIsFlush(true);\n        return suit;\n      }\n    }\n\n    return null;\n  };\n\n  // HIGH CARD CHECK\n\n  const highCardCheck = (batch) => {\n    let highestCard = null;\n    setIsHighCard(true);\n\n    batch.forEach((card) => {\n      const faceToInteger = {\n        J: 11,\n        Q: 12,\n        K: 13,\n        A: 14,\n      };\n\n      const rank = card[0];\n      const rankValue = faceToInteger[rank] || parseInt(rank);\n\n      if (!highestCard || rankValue > highestCard.value) {\n        highestCard = { rank, value: rankValue };\n      }\n    });\n\n    const highCard = highestCard.rank;\n    console.log(\"THE BATCH IN QUESTION --->\", batch, highCard);\n    return highCard;\n  };\n\n  // STRAIGHT CHECK COMPUTER\n  const straightCheckComputer = (batch) => {\n    const faceToInteger = {\n      0: 10,\n      J: 11,\n      Q: 12,\n      K: 13,\n      A: 14,\n    };\n    console.log(\"FACETOIN\", faceToInteger);\n\n    const intAssesser = batch.map((card) => {\n      const firstCharacter = card[0];\n      console.log(\"First Character:\", firstCharacter);\n      return faceToInteger[firstCharacter] || parseInt(firstCharacter);\n    });\n\n    intAssesser.sort((a, b) => a - b);\n    console.log(\"AFTER SORT:\", intAssesser);\n\n    let consecutiveCount = 1;\n    for (let i = 0; i < intAssesser.length - 1; i++) {\n      if (intAssesser[i + 1] - intAssesser[i] === 1) {\n        consecutiveCount++;\n        console.log(\"Consecutive Count:\", consecutiveCount);\n\n        if (consecutiveCount >= 5) {\n          setIsStraightComputer(true);\n          return true;\n        }\n      } else {\n        consecutiveCount = 1;\n      }\n    }\n\n    return null;\n  };\n\n  // 4 OF-A-KIND CHECK COMPUTER\n\n  const fourKindCheckComputer = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"4-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 4) {\n        setIsFourKindComputer(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 3 OF-A-KIND CHECK COMPUTER\n\n  const threeKindCheckComputer = (batch) => {\n    const rankCounts = {};\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"3-OF-KIND-RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 3) {\n        setIsThreeKindComputer(true);\n        return rank;\n      }\n    }\n\n    return null;\n  };\n\n  // 2 OF-A-KIND CHECK COMPUTER\n\n  const twoKindCheckComputer = (batch) => {\n    const rankCounts = {};\n    let pairCount = 0;\n\n    batch.forEach((card) => {\n      const rank = card[0];\n      rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      console.log(\"2-OF-KIND RANK-COUNTS CHECK:\", rankCounts);\n    });\n\n    for (const rank in rankCounts) {\n      if (rankCounts[rank] >= 2) {\n        setIsTwoKindComputer(true);\n        pairCount++;\n      }\n    }\n\n    if (pairCount >= 2) {\n      setIsTwoPairComputer(true);\n    }\n\n    return null;\n  };\n\n  // FLUSH CHECK COMPUTER\n\n  const flushCheckComputer = (batch) => {\n    const suitCounts = {};\n\n    batch.forEach((card) => {\n      const suit = card[1];\n      suitCounts[suit] = (suitCounts[suit] || 0) + 1;\n      console.log(\"SUIT-COUNTS CHECK:\", suitCounts);\n    });\n\n    for (const suit in suitCounts) {\n      if (suitCounts[suit] >= 5) {\n        setIsFlushComputer(true);\n        return suit;\n      }\n    }\n\n    return null;\n  };\n\n  // HIGH CARD CHECK COMPUTER\n\n  const highCardCheckComputer = (batch) => {\n    let highestCard = null;\n    setIsHighCardComputer(true);\n\n    batch.forEach((card) => {\n      const faceToInteger = {\n        J: 11,\n        Q: 12,\n        K: 13,\n        A: 14,\n      };\n\n      const rank = card[0];\n      const rankValue = faceToInteger[rank] || parseInt(rank);\n\n      if (!highestCard || rankValue > highestCard.value) {\n        highestCard = { rank, value: rankValue };\n      }\n    });\n\n    const highCard = highestCard.rank;\n    console.log(\"HIGH CARD\", highCard);\n    return highCard;\n  };\n\n  const resetGame = () => {\n    setActiveSession(false);\n    setMyDeck(null);\n    setMyCards(null);\n    setDrawn(false);\n    setFlop(null);\n    setFlopped(false);\n    setStartGame(false);\n    setTableCards([]);\n    setComputerHand(null);\n    setFinalRound(false);\n    setAnte(0);\n    setIsFourKind(false);\n    setIsThreeKind(false);\n    setIsTwoKind(false);\n    setIsFlush(false);\n    setIsStraight(false);\n    setIsStraightFlush(false);\n    setIsTwoPair(false);\n    setIsFourKindComputer(false);\n    setIsThreeKindComputer(false);\n    setIsTwoKindComputer(false);\n    setIsFlushComputer(false);\n    setIsStraightFlushComputer(false);\n    setIsTwoPairComputer(false);\n    setIsBestHandComputer(null);\n    setIsBestHandPlayer(null);\n    setIsStraightComputer(false);\n    setIsWinner(null);\n  };\n\n  const retrieveDeck = async () => {\n    const response = await fetch(\n      \"https://www.deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\"\n    );\n    const data = await response.json();\n\n    setMyDeck(data.deck_id);\n    setActiveSession(true);\n    setStartGame(true);\n  };\n\n  const drawCards = async () => {\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=2`\n    );\n    const data = await response.json();\n\n    setMyCards(data.cards);\n    setDrawn(true);\n\n    await drawComputerCards();\n  };\n\n  // NOTES\n\n  const drawComputerCards = async () => {\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=2`\n    );\n    const data = await response.json();\n\n    setComputerHand(data.cards);\n  };\n\n  const drawFlop = async () => {\n    setAnte(ante + 20);\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=3`\n    );\n    const data = await response.json();\n\n    setFlop(data.cards);\n    setFlopped(true);\n    setPlayerChips(playerChips - 10);\n  };\n\n  const hitCard = async () => {\n    setAnte(ante + 20);\n    setPlayerChips(playerChips - 10);\n\n    const response = await fetch(\n      `https://www.deckofcardsapi.com/api/deck/${myDeck}/draw/?count=1`\n    );\n    const data = await response.json();\n\n    setTableCards([...tableCards, ...data.cards]);\n  };\n\n  const handleFinalRound = async () => {\n    setAnte(ante + 20);\n    setPlayerChips(playerChips - 10);\n    setFinalRound(true);\n\n    evaluateComputerHand();\n    evaluatePlayerHand();\n  };\n\n  useEffect(() => {\n    if (isBestHandComputer !== null && isBestHandPlayer !== null) {\n      compareHands();\n    }\n  }, [isBestHandComputer, isBestHandPlayer]);\n\n  const evaluatePlayerHand = () => {\n    const allPlayerCards = [...myCards, ...flop, ...tableCards];\n    console.log(\"PLAYER CARDS:\", allPlayerCards);\n\n    const playerBatch = allPlayerCards.map((card) => card.code);\n    console.log(\"PlayerBatch:\", playerBatch);\n\n    evaluateHand(playerBatch);\n  };\n\n  const evaluateComputerHand = () => {\n    const allComputerCards = [...computerHand, ...flop, ...tableCards];\n    console.log(\"COMPUTER CARDS\", allComputerCards);\n\n    const computerBatch = allComputerCards.map((card) => card.code);\n    console.log(\"COMPUTER BATCH POINTED:\", computerBatch);\n\n    evaluateHandComputer(computerBatch);\n  };\n\n  const evaluateHand = (batch) => {\n    straightCheck(batch);\n    flushCheck(batch);\n    fourKindCheck(batch);\n    threeKindCheck(batch);\n    twoKindCheck(batch);\n    highCardCheck(batch);\n  };\n\n  const evaluateHandComputer = (batch) => {\n    straightCheckComputer(batch);\n    flushCheckComputer(batch);\n    fourKindCheckComputer(batch);\n    threeKindCheckComputer(batch);\n    twoKindCheckComputer(batch);\n    highCardCheckComputer(batch);\n  };\n\n  const rankToHandConverter = (handType) => {\n    const handTypeMap = {\n      9: \"Straight Flush\",\n      8: \"Four of a Kind\",\n      7: \"Full House\",\n      6: \"Flush\",\n      5: \"Straight\",\n      4: \"Three of a Kind\",\n      3: \"Two Pair\",\n      2: \"Pair\",\n      1: \"High Card\",\n    };\n\n    return handTypeMap[handType];\n  };\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"center\"\n      justify=\"center\"\n      minH=\"100vh\"\n      w=\"100%\"\n      background=\"darkgreen\"\n    >\n      <Flex mb=\"auto\">\n        <Image width={[\"200px\",\"300px\",\"300px\",\"500px\",\"500px\"]} src={backgroundImage}  />\n      </Flex>\n      <Box\n          w=\"215px\"\n          h=\"100px\"\n          bg=\"gray.200\"\n          borderRadius=\"md\"\n          textAlign=\"center\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <VStack>\n            <Text fontWeight=\"bold\" fontSize=\"m\">\n              My Chips: {playerChips}\n            </Text>\n\n            <Text color=\"darkred\" fontWeight=\"bold\" fontSize=\"m\">\n              Ante: {ante}\n            </Text>\n          </VStack>\n        </Box>\n\n      <Flex>\n        {playerChips <= 0 && !activeSession && (\n          <VStack>\n            <Text>NO MORE CHIPS</Text>\n            <Button onClick={resetChips} colorScheme=\"blue\">\n              Buy Back: 100 Chips\n            </Button>\n          </VStack>\n        )}\n        {!activeSession && playerChips > 0 && (\n          <VStack pt=\"10\" spacing=\"4\" align=\"center\">\n            <Button  mb=\"50vh\" onClick={retrieveDeck} colorScheme=\"blue\">\n              START GAME\n            </Button>\n          </VStack>\n        )}\n        {activeSession && !myCards && (\n          <VStack pt=\"10\">\n            <Button mb=\"40vh\" onClick={drawCards} disabled={drawn} colorScheme=\"green\">\n              DRAW CARDS\n            </Button>\n          </VStack>\n        )}\n        {activeSession && myCards && (\n          <VStack>\n            <Text color=\"white\" fontSize=\"xl\">COMPUTER'S CARDS:</Text>\n            <Flex>\n              {finalRound ? (\n                computerHand.map((card, index) => (\n                  <Image\n                    key={`${card.code}-${index}`}\n                    src={card.image}\n                    boxSize=\"100px\"\n                  />\n                ))\n              ) : (\n                <>\n                  <Image\n                    src=\"https://www.deckofcardsapi.com/static/img/back.png\"\n                    boxSize=\"100px\"\n                  />\n                  <Image\n                    src=\"https://www.deckofcardsapi.com/static/img/back.png\"\n                    boxSize=\"100px\"\n                  />\n                </>\n              )}\n            </Flex>\n            <Text color=\"white\" marginTop=\"40px\" fontSize=\"xl\">\n              MY CARDS:\n            </Text>\n            <Flex>\n              {myCards.map((card) => (\n                <Image key={card.code} src={card.image} boxSize=\"100px\" />\n              ))}\n            </Flex>\n\n            <VStack>\n              {!flop && (\n                <VStack>\n                  <Text>CALL: 10 Chips</Text>\n                  <Button onClick={drawFlop} colorScheme=\"teal\">\n                    DRAW FLOP\n                  </Button>\n                </VStack>\n              )}\n              <Text marginTop=\"40px\" fontSize=\"xl\">\n                TABLE\n              </Text>\n              <Flex>\n                {flop &&\n                  flop.map((card) => (\n                    <Image key={card.code} src={card.image} boxSize=\"100px\" />\n                  ))}\n                {tableCards.map((card, index) => (\n                  <Image\n                    key={`${card.code}-${index}`}\n                    src={card.image}\n                    boxSize=\"100px\"\n                  />\n                ))}\n                {flopped && tableCards.length === 0 && (\n                  <VStack>\n                    <Text>CALL: 10 Chips</Text>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={hitCard}\n                      colorScheme=\"yellow\"\n                    >\n                      CALL TURN\n                    </Button>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={turnRaise}\n                      colorScheme=\"pink\"\n                    >\n                      RAISE (+10)\n                    </Button>\n                  </VStack>\n                )}\n                {flopped && tableCards.length === 1 && (\n                  <VStack>\n                    <Text>CALL: 10 Chips</Text>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={hitCard}\n                      colorScheme=\"orange\"\n                    >\n                      CALL RIVER\n                    </Button>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={turnRaise}\n                      colorScheme=\"pink\"\n                    >\n                      RAISE (+10)\n                    </Button>\n                  </VStack>\n                )}\n                {tableCards.length === 2 && !finalRound && (\n                  <VStack>\n                    <Text>CALL: 10 Chips</Text>\n\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={handleFinalRound}\n                      colorScheme=\"purple\"\n                    >\n                      PLAY FINAL\n                    </Button>\n                    <Button\n                      marginLeft=\"20px\"\n                      onClick={turnRaise}\n                      colorScheme=\"pink\"\n                    >\n                      RAISE (+10)\n                    </Button>\n                  </VStack>\n                )}\n              </Flex>\n              {!finalRound && (\n                <Button mb=\"10vh\" onClick={resetGame} colorScheme=\"red\">\n                  FOLD\n                </Button>\n              )}\n              {finalRound && (\n                <Button onClick={resetGame} colorScheme=\"cyan\">\n                  NEW GAME\n                </Button>\n              )}\n              {isWinner === \"player\" && (\n                <Box>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    PLAYER WINS!\n                  </Text>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    {rankToHandConverter(isBestHandPlayer)}\n                  </Text>\n                </Box>\n              )}\n              {isWinner === \"computer\" && (\n                <Box>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    COMPUTER WINS!\n                  </Text>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    {rankToHandConverter(isBestHandComputer)}\n                  </Text>\n                </Box>\n              )}\n              {isWinner === \"tie\" && (\n                <Box>\n                  <Text\n                    color=\"red\"\n                    fontWeight=\"bold\"\n                    fontSize=\"40\"\n                    textAlign=\"center\"\n                    style={{\n                      WebkitTextStroke: \"1px white\",\n                      WebkitTextFillColor: \"red\",\n                    }}\n                  >\n                    TIE\n                  </Text>\n                </Box>\n              )}\n            </VStack>\n          </VStack>\n        )}\n\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default StartGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}